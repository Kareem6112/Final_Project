
Embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00002226  000022ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fb  008001ea  008001ea  00002444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000710  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006cf6  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cd9  00000000  00000000  000098b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000464c  00000000  00000000  0000b58f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013e4  00000000  00000000  0000fbdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db4  00000000  00000000  00010fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055c1  00000000  00000000  00012d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  00018335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_1>
       8:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_2>
       c:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_3>
      10:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_4>
      14:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_10>
      2c:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__vector_15>
      40:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_16>
      44:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
      8a:	0c 94 11 11 	jmp	0x2222	; 0x2222 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TxHandler>:
		}

}

void TxHandler(void)
{
      92:	08 95       	ret

00000094 <RxHandler>:
	u8 number[10];
}Pass;
Pass arr[MAX];
Pass RAM;
void RxHandler(u8 receivedData)
{	
      94:	cf 93       	push	r28
	static u8 loc=0;
	static u8 Reg_counter=0;
	static u8 LOC=0;
	static u8 temp[5];
	if (loc==0)
      96:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <loc.2052>
      9a:	91 11       	cpse	r25, r1
      9c:	14 c0       	rjmp	.+40     	; 0xc6 <RxHandler+0x32>
	{
		if (receivedData =='1')
      9e:	81 33       	cpi	r24, 0x31	; 49
      a0:	21 f4       	brne	.+8      	; 0xaa <RxHandler+0x16>
		{
			condition=login;
      a2:	81 e0       	ldi	r24, 0x01	; 1
      a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      a8:	0a c0       	rjmp	.+20     	; 0xbe <RxHandler+0x2a>
			
		}
		else if (receivedData =='2')
      aa:	82 33       	cpi	r24, 0x32	; 50
      ac:	19 f4       	brne	.+6      	; 0xb4 <RxHandler+0x20>
		{
			condition=Reg;
      ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      b2:	05 c0       	rjmp	.+10     	; 0xbe <RxHandler+0x2a>
			
		}
		else if (receivedData =='3')
      b4:	83 33       	cpi	r24, 0x33	; 51
      b6:	19 f4       	brne	.+6      	; 0xbe <RxHandler+0x2a>
		{
			condition=Delete;
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		}
		loc=1;
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <loc.2052>
		return;
      c4:	fc c0       	rjmp	.+504    	; 0x2be <RxHandler+0x22a>
	}
	if (condition != Run_time)
      c6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      ca:	94 30       	cpi	r25, 0x04	; 4
      cc:	09 f4       	brne	.+2      	; 0xd0 <RxHandler+0x3c>
      ce:	f2 c0       	rjmp	.+484    	; 0x2b4 <RxHandler+0x220>
      d0:	c8 2f       	mov	r28, r24
	{
			if(condition==Reg && Reg_counter<5)
      d2:	91 11       	cpse	r25, r1
      d4:	15 c0       	rjmp	.+42     	; 0x100 <RxHandler+0x6c>
      d6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <Reg_counter.2053>
      da:	e5 30       	cpi	r30, 0x05	; 5
      dc:	88 f4       	brcc	.+34     	; 0x100 <RxHandler+0x6c>
			{

				temp[Reg_counter]= receivedData;
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	e5 51       	subi	r30, 0x15	; 21
      e2:	fe 4f       	sbci	r31, 0xFE	; 254
      e4:	80 83       	st	Z, r24
				
				LCD_voidSendData(temp[Reg_counter]);
      e6:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
				LOC++;
      ea:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__data_end>
				Reg_counter++;
      f4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Reg_counter.2053>
      f8:	8f 5f       	subi	r24, 0xFF	; 255
      fa:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Reg_counter.2053>
      fe:	90 c0       	rjmp	.+288    	; 0x220 <RxHandler+0x18c>
				
			}else if(condition==Reg && (Reg_counter>=5 && Reg_counter<=10))
     100:	91 11       	cpse	r25, r1
     102:	19 c0       	rjmp	.+50     	; 0x136 <RxHandler+0xa2>
     104:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Reg_counter.2053>
     108:	85 50       	subi	r24, 0x05	; 5
     10a:	86 30       	cpi	r24, 0x06	; 6
     10c:	a0 f4       	brcc	.+40     	; 0x136 <RxHandler+0xa2>
			{
				
				temp[LOC]=  receivedData;
     10e:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <__data_end>
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	e5 51       	subi	r30, 0x15	; 21
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	c0 83       	st	Z, r28
				LCD_voidSendData(temp[LOC]);
     11a:	8c 2f       	mov	r24, r28
     11c:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
				LOC++;
     120:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
     124:	8f 5f       	subi	r24, 0xFF	; 255
     126:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__data_end>
				
				Reg_counter++;
     12a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Reg_counter.2053>
     12e:	8f 5f       	subi	r24, 0xFF	; 255
     130:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Reg_counter.2053>
     134:	75 c0       	rjmp	.+234    	; 0x220 <RxHandler+0x18c>
				
			}
			else if(condition==login )
     136:	91 30       	cpi	r25, 0x01	; 1
     138:	09 f0       	breq	.+2      	; 0x13c <RxHandler+0xa8>
     13a:	72 c0       	rjmp	.+228    	; 0x220 <RxHandler+0x18c>
			{
				if (count<5 &&user_name==0)
     13c:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <count>
     140:	65 30       	cpi	r22, 0x05	; 5
     142:	58 f5       	brcc	.+86     	; 0x19a <RxHandler+0x106>
     144:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <user_name>
     148:	81 11       	cpse	r24, r1
     14a:	27 c0       	rjmp	.+78     	; 0x19a <RxHandler+0x106>
				{
					
					pasword[count]=receivedData-48;
     14c:	86 2f       	mov	r24, r22
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	fc 01       	movw	r30, r24
     152:	e6 50       	subi	r30, 0x06	; 6
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	20 ed       	ldi	r18, 0xD0	; 208
     158:	2c 0f       	add	r18, r28
     15a:	20 83       	st	Z, r18
					RAM.number[count]=pasword[count];
     15c:	fc 01       	movw	r30, r24
     15e:	ea 52       	subi	r30, 0x2A	; 42
     160:	fd 4f       	sbci	r31, 0xFD	; 253
     162:	25 83       	std	Z+5, r18	; 0x05
					LCD_voidGotoXY(1,count);
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
					LCD_voidSendData(receivedData);
     16a:	8c 2f       	mov	r24, r28
     16c:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     170:	8f e3       	ldi	r24, 0x3F	; 63
     172:	9c e9       	ldi	r25, 0x9C	; 156
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <RxHandler+0xe0>
     178:	00 c0       	rjmp	.+0      	; 0x17a <RxHandler+0xe6>
     17a:	00 00       	nop
					_delay_ms(10);
					LCD_voidGotoXY(1,count);
     17c:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <count>
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
					LCD_voidSendData('*');
     186:	8a e2       	ldi	r24, 0x2A	; 42
     188:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
					count++;
     18c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     190:	8f 5f       	subi	r24, 0xFF	; 255
     192:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <count>
					state=0;
     196:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
				}
				if (count==5 &&user_name==0)
     19a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     19e:	85 30       	cpi	r24, 0x05	; 5
     1a0:	b1 f4       	brne	.+44     	; 0x1ce <RxHandler+0x13a>
     1a2:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <user_name>
     1a6:	81 11       	cpse	r24, r1
     1a8:	12 c0       	rjmp	.+36     	; 0x1ce <RxHandler+0x13a>
				{
					state=1;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <state>
					LCD_voidGotoXY(1,0);
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
					LCD_voidIntDisplay(state);
     1b6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <state>
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_voidIntDisplay>
					password_iteration++;
     1c0:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <password_iteration>
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
     1c6:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <password_iteration>
					count=0;                             // new
     1ca:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <count>
				}
				if (count<5 && user_name==1)
     1ce:	60 91 f9 01 	lds	r22, 0x01F9	; 0x8001f9 <count>
     1d2:	65 30       	cpi	r22, 0x05	; 5
     1d4:	d8 f4       	brcc	.+54     	; 0x20c <RxHandler+0x178>
     1d6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <user_name>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	b9 f4       	brne	.+46     	; 0x20c <RxHandler+0x178>
				{

					RAM.name[count]=receivedData;
     1de:	e6 2f       	mov	r30, r22
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	ea 52       	subi	r30, 0x2A	; 42
     1e4:	fd 4f       	sbci	r31, 0xFD	; 253
     1e6:	c0 83       	st	Z, r28
					LCD_voidGotoXY(1,count);
     1e8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
					LCD_voidSendData(receivedData);
     1ec:	8c 2f       	mov	r24, r28
     1ee:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
     1f2:	8f e3       	ldi	r24, 0x3F	; 63
     1f4:	9c e9       	ldi	r25, 0x9C	; 156
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <RxHandler+0x162>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <RxHandler+0x168>
     1fc:	00 00       	nop
					_delay_ms(10);
					
					count++;
     1fe:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <count>
					state=0;
     208:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
				}
				if (count==5 && user_name==1)
     20c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     210:	85 30       	cpi	r24, 0x05	; 5
     212:	31 f4       	brne	.+12     	; 0x220 <RxHandler+0x18c>
     214:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <user_name>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	11 f4       	brne	.+4      	; 0x220 <RxHandler+0x18c>
				{
					state=1;
     21c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <state>
					//count=0;                             // new
				}
			}
			
			
			if (Reg_counter==5)
     220:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Reg_counter.2053>
     224:	85 30       	cpi	r24, 0x05	; 5
     226:	31 f5       	brne	.+76     	; 0x274 <RxHandler+0x1e0>
     228:	14 c0       	rjmp	.+40     	; 0x252 <RxHandler+0x1be>
			{
				for (u8 i=0;i<5;i++)
				{
					arr[user_number].name[i]=temp[i];
     22a:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <user_number>
     22e:	24 2f       	mov	r18, r20
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	e5 51       	subi	r30, 0x15	; 21
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	50 81       	ld	r21, Z
     23a:	6f e0       	ldi	r22, 0x0F	; 15
     23c:	96 9f       	mul	r25, r22
     23e:	c0 01       	movw	r24, r0
     240:	11 24       	eor	r1, r1
     242:	80 5c       	subi	r24, 0xC0	; 192
     244:	9d 4f       	sbci	r25, 0xFD	; 253
     246:	fc 01       	movw	r30, r24
     248:	e2 0f       	add	r30, r18
     24a:	f3 1f       	adc	r31, r19
     24c:	50 83       	st	Z, r21
			}
			
			
			if (Reg_counter==5)
			{
				for (u8 i=0;i<5;i++)
     24e:	4f 5f       	subi	r20, 0xFF	; 255
     250:	01 c0       	rjmp	.+2      	; 0x254 <RxHandler+0x1c0>
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	45 30       	cpi	r20, 0x05	; 5
     256:	48 f3       	brcs	.-46     	; 0x22a <RxHandler+0x196>
				{
					arr[user_number].name[i]=temp[i];
				}
				
				LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
				LCD_voidSendString("Enter Password");
     25e:	81 e7       	ldi	r24, 0x71	; 113
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
				LCD_voidGotoXY(1,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
				LOC=0;
     26e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
     272:	25 c0       	rjmp	.+74     	; 0x2be <RxHandler+0x22a>
				
			}else if (Reg_counter==10)
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	19 f5       	brne	.+70     	; 0x2be <RxHandler+0x22a>
     278:	16 c0       	rjmp	.+44     	; 0x2a6 <RxHandler+0x212>
			{
				for (u8 i=0;i<5;i++)
				{
					arr[user_number].number[i]=temp[i]-48;
     27a:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <user_number>
     27e:	24 2f       	mov	r18, r20
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	e5 51       	subi	r30, 0x15	; 21
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	50 81       	ld	r21, Z
     28a:	6f e0       	ldi	r22, 0x0F	; 15
     28c:	96 9f       	mul	r25, r22
     28e:	c0 01       	movw	r24, r0
     290:	11 24       	eor	r1, r1
     292:	80 5c       	subi	r24, 0xC0	; 192
     294:	9d 4f       	sbci	r25, 0xFD	; 253
     296:	fc 01       	movw	r30, r24
     298:	e2 0f       	add	r30, r18
     29a:	f3 1f       	adc	r31, r19
     29c:	20 ed       	ldi	r18, 0xD0	; 208
     29e:	25 0f       	add	r18, r21
     2a0:	25 83       	std	Z+5, r18	; 0x05
				LCD_voidGotoXY(1,0);
				LOC=0;
				
			}else if (Reg_counter==10)
			{
				for (u8 i=0;i<5;i++)
     2a2:	4f 5f       	subi	r20, 0xFF	; 255
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <RxHandler+0x214>
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	45 30       	cpi	r20, 0x05	; 5
     2aa:	38 f3       	brcs	.-50     	; 0x27a <RxHandler+0x1e6>
				{
					arr[user_number].number[i]=temp[i]-48;
					
				}
				global=1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <global>
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <RxHandler+0x22a>
			}
	}else if (condition== Run_time)
     2b4:	94 30       	cpi	r25, 0x04	; 4
     2b6:	19 f4       	brne	.+6      	; 0x2be <RxHandler+0x22a>
		{
			//LCD_voidIntDisplay(receivedData-48);
			optimal=receivedData-48;
     2b8:	80 53       	subi	r24, 0x30	; 48
     2ba:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <optimal>
		}

}
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <check_password>:
		}
	}

}
u8 check_password(u8 var)
{
     2c2:	cf 93       	push	r28
     2c4:	c8 2f       	mov	r28, r24
	
u8 correct=0;
LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
	if (count==5)
     2cc:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     2d0:	85 30       	cpi	r24, 0x05	; 5
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <check_password+0x14>
     2d4:	50 c0       	rjmp	.+160    	; 0x376 <check_password+0xb4>
     2d6:	15 c0       	rjmp	.+42     	; 0x302 <check_password+0x40>
	{	
		
			for (u8 j=0;j<5;j++)
			{	
				if (RAM.number[j]==arr[var].number[j+5])
     2d8:	82 2f       	mov	r24, r18
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	ea 52       	subi	r30, 0x2A	; 42
     2e0:	fd 4f       	sbci	r31, 0xFD	; 253
     2e2:	45 81       	ldd	r20, Z+5	; 0x05
     2e4:	05 96       	adiw	r24, 0x05	; 5
     2e6:	5f e0       	ldi	r21, 0x0F	; 15
     2e8:	c5 9f       	mul	r28, r21
     2ea:	f0 01       	movw	r30, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	e0 5c       	subi	r30, 0xC0	; 192
     2f0:	fd 4f       	sbci	r31, 0xFD	; 253
     2f2:	e8 0f       	add	r30, r24
     2f4:	f9 1f       	adc	r31, r25
     2f6:	85 81       	ldd	r24, Z+5	; 0x05
     2f8:	48 13       	cpse	r20, r24
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <check_password+0x3c>
				{
					
					correct++;
     2fc:	3f 5f       	subi	r19, 0xFF	; 255
u8 correct=0;
LCD_voidSendCommand(LCD_CLEAR_COMMAND);
	if (count==5)
	{	
		
			for (u8 j=0;j<5;j++)
     2fe:	2f 5f       	subi	r18, 0xFF	; 255
     300:	02 c0       	rjmp	.+4      	; 0x306 <check_password+0x44>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	25 30       	cpi	r18, 0x05	; 5
     308:	38 f3       	brcs	.-50     	; 0x2d8 <check_password+0x16>
				
			}
			
			
		
		if (correct==5)
     30a:	35 30       	cpi	r19, 0x05	; 5
     30c:	99 f4       	brne	.+38     	; 0x334 <check_password+0x72>
		{
			LCD_voidGotoXY(1,0);
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Right");
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	93 ed       	ldi	r25, 0xD3	; 211
     322:	20 e3       	ldi	r18, 0x30	; 48
     324:	81 50       	subi	r24, 0x01	; 1
     326:	90 40       	sbci	r25, 0x00	; 0
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <check_password+0x62>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <check_password+0x6c>
     32e:	00 00       	nop
			_delay_ms(1000);
			correct=0;
			return 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	2e c0       	rjmp	.+92     	; 0x390 <check_password+0xce>
		}else
		{
			Erorr_number++;
     334:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <Erorr_number>
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Erorr_number>
			LCD_voidGotoXY(1,0);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Wrong");
     346:	86 e8       	ldi	r24, 0x86	; 134
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     34e:	5f ef       	ldi	r21, 0xFF	; 255
     350:	83 ed       	ldi	r24, 0xD3	; 211
     352:	90 e3       	ldi	r25, 0x30	; 48
     354:	51 50       	subi	r21, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <check_password+0x92>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <check_password+0x9c>
     35e:	00 00       	nop
			
			_delay_ms(1000);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
			LCD_voidSendString("Enter password");
     366:	8c e8       	ldi	r24, 0x8C	; 140
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			state=0;
     36e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
			
			correct=0;
		}
		count=0;
     372:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <count>
	}
	if (Erorr_number==3)
     376:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <Erorr_number>
     37a:	83 30       	cpi	r24, 0x03	; 3
     37c:	41 f4       	brne	.+16     	; 0x38e <check_password+0xcc>
	{
		LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
		LCD_voidSendString("Reset System");
     384:	8b e9       	ldi	r24, 0x9B	; 155
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     38c:	ff cf       	rjmp	.-2      	; 0x38c <check_password+0xca>
		while(1);
	}
	return 0;
     38e:	80 e0       	ldi	r24, 0x00	; 0
	
}
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <check_username>:
u8 check_username(u8 *ptr)
{
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
	u8 correct=0;
	 u8 iteration=0;
	 *ptr=iteration;
     39a:	18 82       	st	Y, r1
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
	if (count==5)
     3a2:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <count>
     3a6:	85 30       	cpi	r24, 0x05	; 5
     3a8:	09 f0       	breq	.+2      	; 0x3ac <check_username+0x18>
     3aa:	5d c0       	rjmp	.+186    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     3ac:	1f c0       	rjmp	.+62     	; 0x3ec <check_username+0x58>
		for(u8 i=0;i<user_number;i++)
		{
			for (u8 j=0;j<5;j++)
			{
				
				if (RAM.name[j]==arr[i].name[j])
     3ae:	82 2f       	mov	r24, r18
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	ea 52       	subi	r30, 0x2A	; 42
     3b6:	fd 4f       	sbci	r31, 0xFD	; 253
     3b8:	30 81       	ld	r19, Z
     3ba:	ef e0       	ldi	r30, 0x0F	; 15
     3bc:	6e 9f       	mul	r22, r30
     3be:	a0 01       	movw	r20, r0
     3c0:	11 24       	eor	r1, r1
     3c2:	40 5c       	subi	r20, 0xC0	; 192
     3c4:	5d 4f       	sbci	r21, 0xFD	; 253
     3c6:	fa 01       	movw	r30, r20
     3c8:	e8 0f       	add	r30, r24
     3ca:	f9 1f       	adc	r31, r25
     3cc:	80 81       	ld	r24, Z
     3ce:	38 13       	cpse	r19, r24
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <check_username+0x40>
				{
					
					correct++;
     3d2:	7f 5f       	subi	r23, 0xFF	; 255
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
	if (count==5)
	{
		for(u8 i=0;i<user_number;i++)
		{
			for (u8 j=0;j<5;j++)
     3d4:	2f 5f       	subi	r18, 0xFF	; 255
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <check_username+0x48>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	25 30       	cpi	r18, 0x05	; 5
     3de:	38 f3       	brcs	.-50     	; 0x3ae <check_username+0x1a>
					
					correct++;
				}
			}
			
			if (correct==5)
     3e0:	75 30       	cpi	r23, 0x05	; 5
     3e2:	59 f0       	breq	.+22     	; 0x3fa <check_username+0x66>
			{
				break;
			}else correct=0;
			iteration++;
     3e4:	af 5f       	subi	r26, 0xFF	; 255
			*ptr=iteration;
     3e6:	a8 83       	st	Y, r26
	 u8 iteration=0;
	 *ptr=iteration;
	LCD_voidSendCommand(LCD_CLEAR_COMMAND);
	if (count==5)
	{
		for(u8 i=0;i<user_number;i++)
     3e8:	6f 5f       	subi	r22, 0xFF	; 255
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <check_username+0x5c>
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <user_number>
     3f4:	68 17       	cp	r22, r24
     3f6:	80 f3       	brcs	.-32     	; 0x3d8 <check_username+0x44>
     3f8:	70 e0       	ldi	r23, 0x00	; 0
			*ptr=iteration;
			
			
		}
		
		if (correct==5)
     3fa:	75 30       	cpi	r23, 0x05	; 5
     3fc:	99 f4       	brne	.+38     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		{
			LCD_voidGotoXY(1,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Right");
     406:	80 e8       	ldi	r24, 0x80	; 128
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	89 e6       	ldi	r24, 0x69	; 105
     412:	98 e1       	ldi	r25, 0x18	; 24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	90 40       	sbci	r25, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
			_delay_ms(500);
			correct=0;
			return 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	2e c0       	rjmp	.+92     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		}else
		{
			Erorr_number++;
     424:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <Erorr_number>
     428:	8f 5f       	subi	r24, 0xFF	; 255
     42a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Erorr_number>
			LCD_voidGotoXY(1,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Wrong");
     436:	86 e8       	ldi	r24, 0x86	; 134
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     43e:	ef ef       	ldi	r30, 0xFF	; 255
     440:	29 e6       	ldi	r18, 0x69	; 105
     442:	88 e1       	ldi	r24, 0x18	; 24
     444:	e1 50       	subi	r30, 0x01	; 1
     446:	20 40       	sbci	r18, 0x00	; 0
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
			_delay_ms(500);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
			LCD_voidSendString("Enter password");
     456:	8c e8       	ldi	r24, 0x8C	; 140
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			state=0;
     45e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
			
			correct=0;
			
		}
		count=0;
     462:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <count>
	}
	if (Erorr_number==3)
     466:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <Erorr_number>
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	41 f4       	brne	.+16     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
		LCD_voidSendString("Reset System");
     474:	8b e9       	ldi	r24, 0x9B	; 155
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     47c:	ff cf       	rjmp	.-2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		while(1);
	}
	return 0;
     47e:	80 e0       	ldi	r24, 0x00	; 0
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <Register>:
void Register(void)
{
     486:	cf 93       	push	r28

	if (global==1)
     488:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <global>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <Register+0xc>
     490:	84 c0       	rjmp	.+264    	; 0x59a <Register+0x114>
     492:	22 c0       	rjmp	.+68     	; 0x4d8 <Register+0x52>
	{
		
		for (u8 i=0;i<10;i=i+2)
		{
			EEPROM_voidSendData(i+user_number*20,arr[user_number].name[i/2]);
     494:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <user_number>
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	8c 2f       	mov	r24, r28
     49c:	86 95       	lsr	r24
     49e:	9f e0       	ldi	r25, 0x0F	; 15
     4a0:	92 9f       	mul	r25, r18
     4a2:	f0 01       	movw	r30, r0
     4a4:	93 9f       	mul	r25, r19
     4a6:	f0 0d       	add	r31, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	e0 5c       	subi	r30, 0xC0	; 192
     4ac:	fd 4f       	sbci	r31, 0xFD	; 253
     4ae:	e8 0f       	add	r30, r24
     4b0:	f1 1d       	adc	r31, r1
     4b2:	60 81       	ld	r22, Z
     4b4:	44 e1       	ldi	r20, 0x14	; 20
     4b6:	42 9f       	mul	r20, r18
     4b8:	c0 01       	movw	r24, r0
     4ba:	43 9f       	mul	r20, r19
     4bc:	90 0d       	add	r25, r0
     4be:	11 24       	eor	r1, r1
     4c0:	8c 0f       	add	r24, r28
     4c2:	91 1d       	adc	r25, r1
     4c4:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
     4c8:	8f e1       	ldi	r24, 0x1F	; 31
     4ca:	9e e4       	ldi	r25, 0x4E	; 78
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <Register+0x46>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <Register+0x4c>
     4d2:	00 00       	nop
{

	if (global==1)
	{
		
		for (u8 i=0;i<10;i=i+2)
     4d4:	ce 5f       	subi	r28, 0xFE	; 254
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <Register+0x54>
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
     4da:	ca 30       	cpi	r28, 0x0A	; 10
     4dc:	d8 f2       	brcs	.-74     	; 0x494 <Register+0xe>
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	24 c0       	rjmp	.+72     	; 0x52a <Register+0xa4>
		
			_delay_ms(5);
		}
		for (u8 i=0;i<10;i=i+2)
		{
			EEPROM_voidSendData((i+10)+user_number*20,arr[user_number].number[i/2]);
     4e2:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <user_number>
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	6c 2f       	mov	r22, r28
     4ea:	66 95       	lsr	r22
     4ec:	8c 2f       	mov	r24, r28
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0a 96       	adiw	r24, 0x0a	; 10
     4f2:	74 e1       	ldi	r23, 0x14	; 20
     4f4:	72 9f       	mul	r23, r18
     4f6:	a0 01       	movw	r20, r0
     4f8:	73 9f       	mul	r23, r19
     4fa:	50 0d       	add	r21, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	7f e0       	ldi	r23, 0x0F	; 15
     500:	72 9f       	mul	r23, r18
     502:	f0 01       	movw	r30, r0
     504:	73 9f       	mul	r23, r19
     506:	f0 0d       	add	r31, r0
     508:	11 24       	eor	r1, r1
     50a:	e0 5c       	subi	r30, 0xC0	; 192
     50c:	fd 4f       	sbci	r31, 0xFD	; 253
     50e:	e6 0f       	add	r30, r22
     510:	f1 1d       	adc	r31, r1
     512:	65 81       	ldd	r22, Z+5	; 0x05
     514:	84 0f       	add	r24, r20
     516:	95 1f       	adc	r25, r21
     518:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
     51c:	8f e1       	ldi	r24, 0x1F	; 31
     51e:	9e e4       	ldi	r25, 0x4E	; 78
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <Register+0x9a>
     524:	00 c0       	rjmp	.+0      	; 0x526 <Register+0xa0>
     526:	00 00       	nop
		{
			EEPROM_voidSendData(i+user_number*20,arr[user_number].name[i/2]);
		
			_delay_ms(5);
		}
		for (u8 i=0;i<10;i=i+2)
     528:	ce 5f       	subi	r28, 0xFE	; 254
     52a:	ca 30       	cpi	r28, 0x0A	; 10
     52c:	d0 f2       	brcs	.-76     	; 0x4e2 <Register+0x5c>
     52e:	c0 e0       	ldi	r28, 0x00	; 0
     530:	0e c0       	rjmp	.+28     	; 0x54e <Register+0xc8>
			
			_delay_ms(5);
		}
		for (u8 i=0;i<10;i=i+2)
		{
			LCD_voidSendData(EEPROM_voidReciveData(i+user_number*20));
     532:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <user_number>
     536:	8c 2f       	mov	r24, r28
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	34 e1       	ldi	r19, 0x14	; 20
     53c:	23 9f       	mul	r18, r19
     53e:	80 0d       	add	r24, r0
     540:	91 1d       	adc	r25, r1
     542:	11 24       	eor	r1, r1
     544:	0e 94 c3 08 	call	0x1186	; 0x1186 <EEPROM_voidReciveData>
     548:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
		{
			EEPROM_voidSendData((i+10)+user_number*20,arr[user_number].number[i/2]);
			
			_delay_ms(5);
		}
		for (u8 i=0;i<10;i=i+2)
     54c:	ce 5f       	subi	r28, 0xFE	; 254
     54e:	ca 30       	cpi	r28, 0x0A	; 10
     550:	80 f3       	brcs	.-32     	; 0x532 <Register+0xac>
     552:	ca e0       	ldi	r28, 0x0A	; 10
     554:	0f c0       	rjmp	.+30     	; 0x574 <Register+0xee>
		{
			LCD_voidSendData(EEPROM_voidReciveData(i+user_number*20));
		}
		for (u8 i=10;i<20;i=i+2)
		{
			LCD_voidIntDisplay(EEPROM_voidReciveData((i)+user_number*20));
     556:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <user_number>
     55a:	8c 2f       	mov	r24, r28
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	34 e1       	ldi	r19, 0x14	; 20
     560:	23 9f       	mul	r18, r19
     562:	80 0d       	add	r24, r0
     564:	91 1d       	adc	r25, r1
     566:	11 24       	eor	r1, r1
     568:	0e 94 c3 08 	call	0x1186	; 0x1186 <EEPROM_voidReciveData>
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_voidIntDisplay>
		}
		for (u8 i=0;i<10;i=i+2)
		{
			LCD_voidSendData(EEPROM_voidReciveData(i+user_number*20));
		}
		for (u8 i=10;i<20;i=i+2)
     572:	ce 5f       	subi	r28, 0xFE	; 254
     574:	c4 31       	cpi	r28, 0x14	; 20
     576:	78 f3       	brcs	.-34     	; 0x556 <Register+0xd0>
		{
			LCD_voidIntDisplay(EEPROM_voidReciveData((i)+user_number*20));
		}
		global=0;
     578:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <global>
		user_number++;
     57c:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <user_number>
     580:	6f 5f       	subi	r22, 0xFF	; 255
     582:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <user_number>
		EEPROM_voidSendData(103,user_number);
     586:	87 e6       	ldi	r24, 0x67	; 103
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
			EEPROM_voidSendData(103,user_number);
     58e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <user_number>
     592:	87 e6       	ldi	r24, 0x67	; 103
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
	}
}
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <System_enter>:
u8 System_enter(u8 var)
{
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	18 2f       	mov	r17, r24
	u8 counter=0;
	u8 key=0;
	count=0;
     5a6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <count>
	state=0;
     5aa:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
	while(state==0)
     5ae:	41 c0       	rjmp	.+130    	; 0x632 <System_enter+0x94>
	{
		
		LCD_voidSendString("Enter password");
     5b0:	8c e8       	ldi	r24, 0x8C	; 140
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		LCD_voidGotoXY(1,0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		for (counter=0;counter<5;counter++)
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
     5c2:	2f c0       	rjmp	.+94     	; 0x622 <System_enter+0x84>
		{
			
			do
			{
				key=KEYPAD_u8GetKey();
     5c4:	0e 94 38 09 	call	0x1270	; 0x1270 <KEYPAD_u8GetKey>
     5c8:	c8 2f       	mov	r28, r24
				if (state==1)break;
     5ca:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <state>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	11 f0       	breq	.+4      	; 0x5d6 <System_enter+0x38>
				
			} while (key==0xff);
     5d2:	cf 3f       	cpi	r28, 0xFF	; 255
     5d4:	b9 f3       	breq	.-18     	; 0x5c4 <System_enter+0x26>
			
			if (state==1)break;
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	31 f1       	breq	.+76     	; 0x626 <System_enter+0x88>
			LCD_voidGotoXY(1,counter);
     5da:	6d 2f       	mov	r22, r29
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			pasword[counter]=key-48;
     5e2:	8d 2f       	mov	r24, r29
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	20 ed       	ldi	r18, 0xD0	; 208
     5e8:	2c 0f       	add	r18, r28
     5ea:	fc 01       	movw	r30, r24
     5ec:	e6 50       	subi	r30, 0x06	; 6
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	20 83       	st	Z, r18
			RAM.number[counter]=pasword[counter];
     5f2:	fc 01       	movw	r30, r24
     5f4:	ea 52       	subi	r30, 0x2A	; 42
     5f6:	fd 4f       	sbci	r31, 0xFD	; 253
     5f8:	25 83       	std	Z+5, r18	; 0x05
			LCD_voidSendData(key);
     5fa:	8c 2f       	mov	r24, r28
     5fc:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
     600:	2f ef       	ldi	r18, 0xFF	; 255
     602:	89 e6       	ldi	r24, 0x69	; 105
     604:	98 e1       	ldi	r25, 0x18	; 24
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <System_enter+0x68>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <System_enter+0x72>
     610:	00 00       	nop
			_delay_ms(500);
			LCD_voidGotoXY(1,counter);
     612:	6d 2f       	mov	r22, r29
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendData('*');
     61a:	8a e2       	ldi	r24, 0x2A	; 42
     61c:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
	while(state==0)
	{
		
		LCD_voidSendString("Enter password");
		LCD_voidGotoXY(1,0);
		for (counter=0;counter<5;counter++)
     620:	df 5f       	subi	r29, 0xFF	; 255
     622:	d5 30       	cpi	r29, 0x05	; 5
     624:	78 f2       	brcs	.-98     	; 0x5c4 <System_enter+0x26>
			LCD_voidSendData(key);
			_delay_ms(500);
			LCD_voidGotoXY(1,counter);
			LCD_voidSendData('*');
		}
		state=1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <state>
		count=5;
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <count>
{
	u8 counter=0;
	u8 key=0;
	count=0;
	state=0;
	while(state==0)
     632:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <state>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <System_enter+0x9e>
     63a:	ba cf       	rjmp	.-140    	; 0x5b0 <System_enter+0x12>
		state=1;
		count=5;
	}


 return check_password(var);
     63c:	81 2f       	mov	r24, r17
     63e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <check_password>

	
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	08 95       	ret

0000064a <System_enter_user>:
u8 System_enter_user(u8 *ptr)
{
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	7c 01       	movw	r14, r24
	u8 counter=0;
	u8 key=0;
	count=0;
     658:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <count>
	state=0;
     65c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
	while(state==0)
     660:	4d c0       	rjmp	.+154    	; 0x6fc <System_enter_user+0xb2>
	{
		LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
		LCD_voidSendString("Enter user");
     668:	88 ea       	ldi	r24, 0xA8	; 168
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		LCD_voidGotoXY(0,0);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
     678:	2f ef       	ldi	r18, 0xFF	; 255
     67a:	83 ed       	ldi	r24, 0xD3	; 211
     67c:	90 e3       	ldi	r25, 0x30	; 48
     67e:	21 50       	subi	r18, 0x01	; 1
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	90 40       	sbci	r25, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <System_enter_user+0x34>
     686:	00 c0       	rjmp	.+0      	; 0x688 <System_enter_user+0x3e>
     688:	00 00       	nop
		_delay_ms(1000);
		for (counter=0;counter<5;counter++)
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	2f c0       	rjmp	.+94     	; 0x6ec <System_enter_user+0xa2>
		{
			
			do
			{
				key=KEYPAD_u8GetKey();
     68e:	0e 94 38 09 	call	0x1270	; 0x1270 <KEYPAD_u8GetKey>
     692:	c8 2f       	mov	r28, r24
				if (state==1)break;
     694:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <state>
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	11 f0       	breq	.+4      	; 0x6a0 <System_enter_user+0x56>
				
			} while (key==0xff);
     69c:	cf 3f       	cpi	r28, 0xFF	; 255
     69e:	b9 f3       	breq	.-18     	; 0x68e <System_enter_user+0x44>
			
			if (state==1)break;
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	31 f1       	breq	.+76     	; 0x6f0 <System_enter_user+0xa6>
			LCD_voidGotoXY(1,counter);
     6a4:	6d 2f       	mov	r22, r29
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendData(RAM.name[counter]);
     6ac:	0d 2f       	mov	r16, r29
     6ae:	10 e0       	ldi	r17, 0x00	; 0
     6b0:	0a 52       	subi	r16, 0x2A	; 42
     6b2:	1d 4f       	sbci	r17, 0xFD	; 253
     6b4:	f8 01       	movw	r30, r16
     6b6:	80 81       	ld	r24, Z
     6b8:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
			RAM.name[counter]=key-48;
     6bc:	80 ed       	ldi	r24, 0xD0	; 208
     6be:	8c 0f       	add	r24, r28
     6c0:	f8 01       	movw	r30, r16
     6c2:	80 83       	st	Z, r24
			LCD_voidSendData(key);
     6c4:	8c 2f       	mov	r24, r28
     6c6:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
     6ca:	ff ef       	ldi	r31, 0xFF	; 255
     6cc:	29 e6       	ldi	r18, 0x69	; 105
     6ce:	88 e1       	ldi	r24, 0x18	; 24
     6d0:	f1 50       	subi	r31, 0x01	; 1
     6d2:	20 40       	sbci	r18, 0x00	; 0
     6d4:	80 40       	sbci	r24, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <System_enter_user+0x86>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <System_enter_user+0x90>
     6da:	00 00       	nop
			_delay_ms(500);
			LCD_voidGotoXY(1,counter);
     6dc:	6d 2f       	mov	r22, r29
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendData('*');
     6e4:	8a e2       	ldi	r24, 0x2A	; 42
     6e6:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
	{
		LCD_voidSendCommand(LCD_CLEAR_COMMAND);
		LCD_voidSendString("Enter user");
		LCD_voidGotoXY(0,0);
		_delay_ms(1000);
		for (counter=0;counter<5;counter++)
     6ea:	df 5f       	subi	r29, 0xFF	; 255
     6ec:	d5 30       	cpi	r29, 0x05	; 5
     6ee:	78 f2       	brcs	.-98     	; 0x68e <System_enter_user+0x44>
			LCD_voidSendData(key);
			_delay_ms(500);
			LCD_voidGotoXY(1,counter);
			LCD_voidSendData('*');
		}
		state=1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <state>
		count=5;
     6f6:	85 e0       	ldi	r24, 0x05	; 5
     6f8:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <count>
{
	u8 counter=0;
	u8 key=0;
	count=0;
	state=0;
	while(state==0)
     6fc:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <state>
     700:	88 23       	and	r24, r24
     702:	09 f4       	brne	.+2      	; 0x706 <System_enter_user+0xbc>
     704:	ae cf       	rjmp	.-164    	; 0x662 <System_enter_user+0x18>
		state=1;
		count=5;
	}


	return check_username(ptr);
     706:	c7 01       	movw	r24, r14
     708:	0e 94 ca 01 	call	0x394	; 0x394 <check_username>
	
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	08 95       	ret

0000071a <member_delete>:
void member_delete(void)
{
	user_number--;
     71a:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <user_number>
     71e:	61 50       	subi	r22, 0x01	; 1
     720:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <user_number>

	EEPROM_voidSendData(103,user_number);
     724:	87 e6       	ldi	r24, 0x67	; 103
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
	EEPROM_voidSendData(103,user_number);
     72c:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <user_number>
     730:	87 e6       	ldi	r24, 0x67	; 103
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 a5 08 	call	0x114a	; 0x114a <EEPROM_voidSendData>
     738:	08 95       	ret

0000073a <main>:
u8 check_username(u8 *ptr);
u8 System_enter_user(u8 *ptr);
void member_delete(void);

int main(void)
{
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
u8 status=0;
condition ==login;
 u8 key=0;
 TWI_voidMasterInit(0) ; 
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <TWI_voidMasterInit>
 DIO_VoidSetPinDir(DIO_PORTD,DIO_PIN7,OUTPUT); // LED indicator
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	67 e0       	ldi	r22, 0x07	; 7
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
 DIO_VoidSetPinDir(DIO_PORTD,DIO_PIN6,OUTPUT); // LED indicator
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	66 e0       	ldi	r22, 0x06	; 6
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
 DIO_VoidSetPinDir(DIO_PORTD,DIO_PIN2,OUTPUT); // LED indicator
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
 DIO_VoidSetPinDir(DIO_PORTD,DIO_PIN3,OUTPUT); // LED indicator
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
 DIO_VoidSetPinDir(DIO_PORTD,DIO_PIN4,OUTPUT); // LED Dimmer Circuit
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	64 e0       	ldi	r22, 0x04	; 4
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
 ADC_voidInit();
     77c:	0e 94 21 0b 	call	0x1642	; 0x1642 <ADC_voidInit>
 SERVO_voidinit(); // Servo
     780:	0e 94 15 0b 	call	0x162a	; 0x162a <SERVO_voidinit>

  
	 LCD_voidInit();
     784:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_voidInit>
	 
	 
	   
	 KEYPAD_voidInit() ; 
     788:	0e 94 e6 08 	call	0x11cc	; 0x11cc <KEYPAD_voidInit>

	 GI_voidEnable();
     78c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GI_voidEnable>
	 UART_INIT_voidInit(9600);
     790:	60 e8       	ldi	r22, 0x80	; 128
     792:	75 e2       	ldi	r23, 0x25	; 37
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <UART_INIT_voidInit>
	 UART_SetRxCallback(RxHandler);
     79c:	8a e4       	ldi	r24, 0x4A	; 74
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_SetRxCallback>
	 UART_SetTxCallback(TxHandler);
     7a4:	89 e4       	ldi	r24, 0x49	; 73
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <UART_SetTxCallback>
	 user_number=EEPROM_voidReciveData(103);
     7ac:	87 e6       	ldi	r24, 0x67	; 103
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 c3 08 	call	0x1186	; 0x1186 <EEPROM_voidReciveData>
     7b4:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <user_number>
	 while(status==0)
     7b8:	41 c0       	rjmp	.+130    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		 LCD_voidGotoXY(3,0);
		 LCD_voidSendString("Delete  : Press 3");
		 UART_voidSendString_INT("   Reg  : Press 3");
		 do
		 {
			 key=KEYPAD_u8GetKey();
     7ba:	0e 94 38 09 	call	0x1270	; 0x1270 <KEYPAD_u8GetKey>
			 if (condition != nothing)
     7be:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7c2:	92 30       	cpi	r25, 0x02	; 2
     7c4:	11 f4       	brne	.+4      	; 0x7ca <main+0x90>
			 {
				 break;
			 }
			 	 
		 } while (key==0xff);
     7c6:	8f 3f       	cpi	r24, 0xFF	; 255
     7c8:	c1 f3       	breq	.-16     	; 0x7ba <main+0x80>
		 if(key == '1' ||condition==login)
     7ca:	81 33       	cpi	r24, 0x31	; 49
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <main+0x98>
     7ce:	91 30       	cpi	r25, 0x01	; 1
     7d0:	79 f4       	brne	.+30     	; 0x7f0 <main+0xb6>
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("login");UART_voidSendString_INT("login");condition=login; status=1; break;}
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
     7d8:	83 eb       	ldi	r24, 0xB3	; 179
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     7e0:	83 eb       	ldi	r24, 0xB3	; 179
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     7ee:	24 c0       	rjmp	.+72     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		 if(key == '2'||condition==Reg)
     7f0:	82 33       	cpi	r24, 0x32	; 50
     7f2:	11 f0       	breq	.+4      	; 0x7f8 <main+0xbe>
     7f4:	91 11       	cpse	r25, r1
     7f6:	0e c0       	rjmp	.+28     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("Register");UART_voidSendString_INT("Register");condition=Reg;status=1; break;}
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
     7fe:	89 eb       	ldi	r24, 0xB9	; 185
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     806:	89 eb       	ldi	r24, 0xB9	; 185
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
     80e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     812:	12 c0       	rjmp	.+36     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		 if(key == '3'||condition==Delete)
     814:	83 33       	cpi	r24, 0x33	; 51
     816:	11 f0       	breq	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     818:	93 30       	cpi	r25, 0x03	; 3
     81a:	81 f4       	brne	.+32     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("Delete");UART_voidSendString_INT("Delete");condition=Delete;status=1; break;}
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
     822:	82 ec       	ldi	r24, 0xC2	; 194
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     82a:	82 ec       	ldi	r24, 0xC2	; 194
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     838:	e1 2c       	mov	r14, r1
     83a:	6e c0       	rjmp	.+220    	; 0x918 <__stack+0xb9>
	 UART_SetRxCallback(RxHandler);
	 UART_SetTxCallback(TxHandler);
	 user_number=EEPROM_voidReciveData(103);
	 while(status==0)
	 {
		 LCD_voidGotoXY(0,0);
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		 LCD_voidSendString("Login: Press 1");
     844:	89 ec       	ldi	r24, 0xC9	; 201
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		 UART_voidSendString_INT("Login: Press 1"); 
     84c:	89 ec       	ldi	r24, 0xC9	; 201
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
		 LCD_voidGotoXY(1,0);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		 LCD_voidSendString("Reg  : Press 2");
     85c:	8b ed       	ldi	r24, 0xDB	; 219
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		 UART_voidSendString_INT("   Reg  : Press 2"); 
     864:	88 ed       	ldi	r24, 0xD8	; 216
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
		 LCD_voidGotoXY(3,0);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		 LCD_voidSendString("Delete  : Press 3");
     874:	8a ee       	ldi	r24, 0xEA	; 234
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		 UART_voidSendString_INT("   Reg  : Press 3");
     87c:	8c ef       	ldi	r24, 0xFC	; 252
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
     884:	9a cf       	rjmp	.-204    	; 0x7ba <main+0x80>
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("Delete");UART_voidSendString_INT("Delete");condition=Delete;status=1; break;}
	 }
	 
	 for (u8 i=0;i<user_number;i++)
	 {
		 LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
		 for (u8 j=0;j<10;j=j+2)
     88c:	f1 2c       	mov	r15, r1
     88e:	1c c0       	rjmp	.+56     	; 0x8c8 <__stack+0x69>
		 {
			 arr[i].name[j/2]=EEPROM_voidReciveData(j+i*20);
     890:	0f 2d       	mov	r16, r15
     892:	06 95       	lsr	r16
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	ce 2c       	mov	r12, r14
     898:	d1 2c       	mov	r13, r1
     89a:	24 e1       	ldi	r18, 0x14	; 20
     89c:	2c 9d       	mul	r18, r12
     89e:	c0 01       	movw	r24, r0
     8a0:	2d 9d       	mul	r18, r13
     8a2:	90 0d       	add	r25, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	8f 0d       	add	r24, r15
     8a8:	91 1d       	adc	r25, r1
     8aa:	0e 94 c3 08 	call	0x1186	; 0x1186 <EEPROM_voidReciveData>
     8ae:	9f e0       	ldi	r25, 0x0F	; 15
     8b0:	9c 9d       	mul	r25, r12
     8b2:	f0 01       	movw	r30, r0
     8b4:	9d 9d       	mul	r25, r13
     8b6:	f0 0d       	add	r31, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	e0 5c       	subi	r30, 0xC0	; 192
     8bc:	fd 4f       	sbci	r31, 0xFD	; 253
     8be:	e0 0f       	add	r30, r16
     8c0:	f1 1f       	adc	r31, r17
     8c2:	80 83       	st	Z, r24
	 }
	 
	 for (u8 i=0;i<user_number;i++)
	 {
		 LCD_voidSendCommand(LCD_CLEAR_COMMAND);
		 for (u8 j=0;j<10;j=j+2)
     8c4:	f3 94       	inc	r15
     8c6:	f3 94       	inc	r15
     8c8:	29 e0       	ldi	r18, 0x09	; 9
     8ca:	2f 15       	cp	r18, r15
     8cc:	08 f7       	brcc	.-62     	; 0x890 <__stack+0x31>
     8ce:	0f 2e       	mov	r0, r31
     8d0:	fa e0       	ldi	r31, 0x0A	; 10
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	1c c0       	rjmp	.+56     	; 0x910 <__stack+0xb1>
		 }
		  //_delay_ms(1000);
		  //LCD_voidGotoXY(1,0);
		 for (u8 j=10;j<20;j=j+2)
		 {
			 arr[i].number[j/2]=EEPROM_voidReciveData((j)+i*20);
     8d8:	0f 2d       	mov	r16, r15
     8da:	06 95       	lsr	r16
     8dc:	10 e0       	ldi	r17, 0x00	; 0
     8de:	ce 2c       	mov	r12, r14
     8e0:	d1 2c       	mov	r13, r1
     8e2:	24 e1       	ldi	r18, 0x14	; 20
     8e4:	2c 9d       	mul	r18, r12
     8e6:	c0 01       	movw	r24, r0
     8e8:	2d 9d       	mul	r18, r13
     8ea:	90 0d       	add	r25, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	8f 0d       	add	r24, r15
     8f0:	91 1d       	adc	r25, r1
     8f2:	0e 94 c3 08 	call	0x1186	; 0x1186 <EEPROM_voidReciveData>
     8f6:	9f e0       	ldi	r25, 0x0F	; 15
     8f8:	9c 9d       	mul	r25, r12
     8fa:	f0 01       	movw	r30, r0
     8fc:	9d 9d       	mul	r25, r13
     8fe:	f0 0d       	add	r31, r0
     900:	11 24       	eor	r1, r1
     902:	e0 5c       	subi	r30, 0xC0	; 192
     904:	fd 4f       	sbci	r31, 0xFD	; 253
     906:	e0 0f       	add	r30, r16
     908:	f1 1f       	adc	r31, r17
     90a:	85 83       	std	Z+5, r24	; 0x05
		   // LCD_voidSendData(arr[i].name[j/2]);
			
		 }
		  //_delay_ms(1000);
		  //LCD_voidGotoXY(1,0);
		 for (u8 j=10;j<20;j=j+2)
     90c:	f3 94       	inc	r15
     90e:	f3 94       	inc	r15
     910:	83 e1       	ldi	r24, 0x13	; 19
     912:	8f 15       	cp	r24, r15
     914:	08 f7       	brcc	.-62     	; 0x8d8 <__stack+0x79>
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("Register");UART_voidSendString_INT("Register");condition=Reg;status=1; break;}
		 if(key == '3'||condition==Delete)
		 {LCD_voidSendCommand(LCD_CLEAR_COMMAND);LCD_voidSendString("Delete");UART_voidSendString_INT("Delete");condition=Delete;status=1; break;}
	 }
	 
	 for (u8 i=0;i<user_number;i++)
     916:	e3 94       	inc	r14
     918:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <user_number>
     91c:	e8 16       	cp	r14, r24
     91e:	08 f4       	brcc	.+2      	; 0x922 <__stack+0xc3>
     920:	b2 cf       	rjmp	.-156    	; 0x886 <__stack+0x27>
			
		 }
		//  _delay_ms(100);
	 }
	 
	 if (condition==login)
     922:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	61 f4       	brne	.+24     	; 0x942 <__stack+0xe3>
	 {
		  UART_voidSendString_INT("Hey Enter your password");
     92a:	8e e0       	ldi	r24, 0x0E	; 14
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
		  LCD_voidGotoXY(0,0);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		  LCD_voidSendString("Enter Password");	 
     93a:	81 e7       	ldi	r24, 0x71	; 113
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
	 }
	 if (condition==Reg)
     942:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     946:	81 11       	cpse	r24, r1
     948:	10 c0       	rjmp	.+32     	; 0x96a <__stack+0x10b>
	 {
		 UART_voidSendString_INT(" Enter user name");
     94a:	86 e2       	ldi	r24, 0x26	; 38
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
		 LCD_voidGotoXY(0,0);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		 LCD_voidSendString("Enter user name");
     95a:	87 e2       	ldi	r24, 0x27	; 39
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		
		 LCD_voidGotoXY(1,0);
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
	 }
	 if (condition==Delete)
     96a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     96e:	83 30       	cpi	r24, 0x03	; 3
     970:	81 f4       	brne	.+32     	; 0x992 <__stack+0x133>
	 {
		 UART_voidSendString_INT(" Delete member");
     972:	87 e3       	ldi	r24, 0x37	; 55
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
		 LCD_voidGotoXY(0,0);
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
		 LCD_voidSendString("Delete member");
     982:	88 e3       	ldi	r24, 0x38	; 56
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
		 LCD_voidGotoXY(1,0);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
	 }
	u8 count1=0;
	u8 admin=110;
     992:	8e e6       	ldi	r24, 0x6E	; 110
     994:	89 83       	std	Y+1, r24	; 0x01
	
	u16 adc_val=0;
	u8  Dimmer_value=0;
     996:	10 e0       	ldi	r17, 0x00	; 0
		 UART_voidSendString_INT(" Delete member");
		 LCD_voidGotoXY(0,0);
		 LCD_voidSendString("Delete member");
		 LCD_voidGotoXY(1,0);
	 }
	u8 count1=0;
     998:	00 e0       	ldi	r16, 0x00	; 0
	u16 adc_val=0;
	u8  Dimmer_value=0;
	while (1)
	{
		
		if (condition==login)
     99a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	b9 f5       	brne	.+110    	; 0xa10 <__stack+0x1b1>
		{
			if (count1==0)
     9a2:	01 11       	cpse	r16, r1
     9a4:	35 c0       	rjmp	.+106    	; 0xa10 <__stack+0x1b1>
			{
				user_name=1;
     9a6:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <user_name>
				
				while( !System_enter_user(& admin));
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	0e 94 25 03 	call	0x64a	; 0x64a <System_enter_user>
     9b2:	88 23       	and	r24, r24
     9b4:	d1 f3       	breq	.-12     	; 0x9aa <__stack+0x14b>
				LCD_voidIntDisplay(admin);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_voidIntDisplay>
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	29 e6       	ldi	r18, 0x69	; 105
     9c2:	88 e1       	ldi	r24, 0x18	; 24
     9c4:	91 50       	subi	r25, 0x01	; 1
     9c6:	20 40       	sbci	r18, 0x00	; 0
     9c8:	80 40       	sbci	r24, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <__stack+0x165>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <__stack+0x16f>
     9ce:	00 00       	nop
				_delay_ms(500);
				if (admin==0)
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	81 11       	cpse	r24, r1
     9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__stack+0x191>
				{
					LCD_voidSendString("ADMIN");
     9d6:	86 e4       	ldi	r24, 0x46	; 70
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	29 e6       	ldi	r18, 0x69	; 105
     9e2:	88 e1       	ldi	r24, 0x18	; 24
     9e4:	91 50       	subi	r25, 0x01	; 1
     9e6:	20 40       	sbci	r18, 0x00	; 0
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <__stack+0x185>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <__stack+0x18f>
     9ee:	00 00       	nop
					
					_delay_ms(500);
				}
				state=0;
     9f0:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <state>
				user_name=0;
     9f4:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <user_name>
				LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
				while( !System_enter(admin));
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	0e 94 cf 02 	call	0x59e	; 0x59e <System_enter>
     a04:	88 23       	and	r24, r24
     a06:	d9 f3       	breq	.-10     	; 0x9fe <__stack+0x19f>

				count1=1;
				LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
				state=0;
				user_name=0;
				LCD_voidSendCommand(LCD_CLEAR_COMMAND);
				while( !System_enter(admin));

				count1=1;
     a0e:	01 e0       	ldi	r16, 0x01	; 1

				
			}
			
		}
		if (condition==Reg &&global==1)
     a10:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a14:	81 11       	cpse	r24, r1
     a16:	20 c0       	rjmp	.+64     	; 0xa58 <__stack+0x1f9>
     a18:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <global>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	e1 f4       	brne	.+56     	; 0xa58 <__stack+0x1f9>
		{
			if (user_number>=10)
     a20:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <user_number>
     a24:	8a 30       	cpi	r24, 0x0A	; 10
     a26:	40 f0       	brcs	.+16     	; 0xa38 <__stack+0x1d9>
			{
				UART_voidSendString_INT("No Maximum Data base");
     a28:	8c e4       	ldi	r24, 0x4C	; 76
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
				LCD_voidSendString("No Maximum Data base");
     a30:	8c e4       	ldi	r24, 0x4C	; 76
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			}
			UART_voidSendString_INT("enter user name");
     a38:	81 e6       	ldi	r24, 0x61	; 97
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <UART_voidSendString_INT>
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
			LCD_voidSendString("enter user name");
     a46:	81 e6       	ldi	r24, 0x61	; 97
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			Register();
     a4e:	0e 94 43 02 	call	0x486	; 0x486 <Register>
			
			condition =login;	
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		}
		if (condition==Delete)
     a58:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a5c:	83 30       	cpi	r24, 0x03	; 3
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x203>
     a60:	be c0       	rjmp	.+380    	; 0xbde <__stack+0x37f>
		{
			member_delete();
     a62:	0e 94 8d 03 	call	0x71a	; 0x71a <member_delete>
			LCD_voidSendString("OK");
     a66:	81 e7       	ldi	r24, 0x71	; 113
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(2,0);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("number of users:");
     a76:	84 e7       	ldi	r24, 0x74	; 116
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidIntDisplay(user_number);
     a7e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <user_number>
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_voidIntDisplay>
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	23 ed       	ldi	r18, 0xD3	; 211
     a8c:	80 e3       	ldi	r24, 0x30	; 48
     a8e:	91 50       	subi	r25, 0x01	; 1
     a90:	20 40       	sbci	r18, 0x00	; 0
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <__stack+0x22f>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <__stack+0x239>
     a98:	00 00       	nop
			_delay_ms(1000);
			condition =login;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     aa0:	9e c0       	rjmp	.+316    	; 0xbde <__stack+0x37f>
		}
	
		while((condition==login ||condition==Run_time) && admin ==0)
		{
			LCD_voidGotoXY(0,0);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP1:1");
     aaa:	85 e8       	ldi	r24, 0x85	; 133
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(0,9);
     ab2:	69 e0       	ldi	r22, 0x09	; 9
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP2:2");
     aba:	8d e8       	ldi	r24, 0x8D	; 141
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(1,0);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP3:3");
     aca:	85 e9       	ldi	r24, 0x95	; 149
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(1,9);
     ad2:	69 e0       	ldi	r22, 0x09	; 9
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP4:4");
     ada:	8d e9       	ldi	r24, 0x9D	; 157
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(2,0);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Door OPEN:5");
     aea:	85 ea       	ldi	r24, 0xA5	; 165
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(3,0);
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Door Close:6");
     afa:	81 eb       	ldi	r24, 0xB1	; 177
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(3,13);
     b02:	6d e0       	ldi	r22, 0x0D	; 13
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Rest:7");
     b0a:	8e eb       	ldi	r24, 0xBE	; 190
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
				adc_val= ADC_u16ReadChannel(ADC3) ;
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	0e 94 31 0b 	call	0x1662	; 0x1662 <ADC_u16ReadChannel>
				adc_val=adc_val-30;
     b18:	4e 97       	sbiw	r24, 0x1e	; 30
     b1a:	7c 01       	movw	r14, r24
				DCMOTOR_voidInit() ;
     b1c:	0e 94 86 08 	call	0x110c	; 0x110c <DCMOTOR_voidInit>
				if (adc_val>28)
     b20:	9d e1       	ldi	r25, 0x1D	; 29
     b22:	e9 16       	cp	r14, r25
     b24:	f1 04       	cpc	r15, r1
     b26:	20 f0       	brcs	.+8      	; 0xb30 <__stack+0x2d1>
				{
					DCMOTOR_voidForward(100) ;
     b28:	84 e6       	ldi	r24, 0x64	; 100
     b2a:	0e 94 96 08 	call	0x112c	; 0x112c <DCMOTOR_voidForward>
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <__stack+0x2d7>
				}else DCMOTOR_voidForward(0) ;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 96 08 	call	0x112c	; 0x112c <DCMOTOR_voidForward>
     b36:	2f ef       	ldi	r18, 0xFF	; 255
     b38:	89 e6       	ldi	r24, 0x69	; 105
     b3a:	98 e1       	ldi	r25, 0x18	; 24
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	80 40       	sbci	r24, 0x00	; 0
     b40:	90 40       	sbci	r25, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <__stack+0x2dd>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <__stack+0x2e7>
     b46:	00 00       	nop
				
			_delay_ms(500);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>

			condition =Run_time;
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(optimal <10)
     b54:	37 c0       	rjmp	.+110    	; 0xbc4 <__stack+0x365>
			{
				
				if (optimal==1)
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	29 f4       	brne	.+10     	; 0xb64 <__stack+0x305>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN7);
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     b62:	2d c0       	rjmp	.+90     	; 0xbbe <__stack+0x35f>
				}else if (optimal==2)
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	29 f4       	brne	.+10     	; 0xb72 <__stack+0x313>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN6);
     b68:	66 e0       	ldi	r22, 0x06	; 6
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     b70:	26 c0       	rjmp	.+76     	; 0xbbe <__stack+0x35f>
				}else if (optimal==3)
     b72:	83 30       	cpi	r24, 0x03	; 3
     b74:	21 f4       	brne	.+8      	; 0xb7e <__stack+0x31f>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN2);
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     b7c:	20 c0       	rjmp	.+64     	; 0xbbe <__stack+0x35f>
				}
				else if (optimal==4)
     b7e:	84 30       	cpi	r24, 0x04	; 4
     b80:	29 f4       	brne	.+10     	; 0xb8c <__stack+0x32d>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN3);
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     b8a:	19 c0       	rjmp	.+50     	; 0xbbe <__stack+0x35f>
				}
				else if (optimal==5)
     b8c:	85 30       	cpi	r24, 0x05	; 5
     b8e:	29 f4       	brne	.+10     	; 0xb9a <__stack+0x33b>
				{
					SERVO_voidSetAngle(120 ,OCR1A_PIN);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	88 e7       	ldi	r24, 0x78	; 120
     b94:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <SERVO_voidSetAngle>
     b98:	12 c0       	rjmp	.+36     	; 0xbbe <__stack+0x35f>
				}
				else if (optimal==6)
     b9a:	86 30       	cpi	r24, 0x06	; 6
     b9c:	29 f4       	brne	.+10     	; 0xba8 <__stack+0x349>
				{
					SERVO_voidSetAngle(0 ,OCR1A_PIN);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <SERVO_voidSetAngle>
     ba6:	0b c0       	rjmp	.+22     	; 0xbbe <__stack+0x35f>
				}else if (optimal ==7)
     ba8:	87 30       	cpi	r24, 0x07	; 7
     baa:	49 f4       	brne	.+18     	; 0xbbe <__stack+0x35f>
				{
					LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
					LCD_voidInit();                      // in this line we use the re intilization to fix the LCD  as it goes invalid after 2 intilization
     bb2:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_voidInit>
					WDT_voidStart(Time_16_3ms );
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <WDT_voidStart>
     bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stack+0x35d>
					while(1);
				}
				optimal=10;
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <optimal>
				
			_delay_ms(500);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);

			condition =Run_time;
			while(optimal <10)
     bc4:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <optimal>
     bc8:	8a 30       	cpi	r24, 0x0A	; 10
     bca:	28 f2       	brcs	.-118    	; 0xb56 <__stack+0x2f7>
     bcc:	2f ef       	ldi	r18, 0xFF	; 255
     bce:	81 ee       	ldi	r24, 0xE1	; 225
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	90 40       	sbci	r25, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <__stack+0x373>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <__stack+0x37d>
     bdc:	00 00       	nop
			LCD_voidIntDisplay(user_number);
			_delay_ms(1000);
			condition =login;
		}
	
		while((condition==login ||condition==Run_time) && admin ==0)
     bde:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	19 f0       	breq	.+6      	; 0xbec <__stack+0x38d>
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	09 f0       	breq	.+2      	; 0xbec <__stack+0x38d>
     bea:	b2 c0       	rjmp	.+356    	; 0xd50 <__stack+0x4f1>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <__stack+0x395>
     bf2:	57 cf       	rjmp	.-338    	; 0xaa2 <__stack+0x243>
     bf4:	ad c0       	rjmp	.+346    	; 0xd50 <__stack+0x4f1>
			}
			_delay_ms(100);
		}
		while((condition==login ||condition==Run_time)&& admin >0)
		{
			LCD_voidGotoXY(0,0);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP1:1");
     bfe:	85 e8       	ldi	r24, 0x85	; 133
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(0,9);
     c06:	69 e0       	ldi	r22, 0x09	; 9
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP2:2");
     c0e:	8d e8       	ldi	r24, 0x8D	; 141
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(1,0);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP3:3");
     c1e:	85 e9       	ldi	r24, 0x95	; 149
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(1,9);
     c26:	69 e0       	ldi	r22, 0x09	; 9
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("LAMP4:4");
     c2e:	8d e9       	ldi	r24, 0x9D	; 157
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(2,0);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Dimmer+:6");
     c3e:	85 ec       	ldi	r24, 0xC5	; 197
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(2,9);
     c46:	69 e0       	ldi	r22, 0x09	; 9
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Dimmer-:7");
     c4e:	8f ec       	ldi	r24, 0xCF	; 207
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidGotoXY(3,9);
     c56:	69 e0       	ldi	r22, 0x09	; 9
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("Rest:5");
     c5e:	89 ed       	ldi	r24, 0xD9	; 217
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			adc_val= ADC_u16ReadChannel(ADC3) ;
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	0e 94 31 0b 	call	0x1662	; 0x1662 <ADC_u16ReadChannel>
			adc_val=adc_val-30;
     c6c:	4e 97       	sbiw	r24, 0x1e	; 30
     c6e:	7c 01       	movw	r14, r24
			LCD_voidGotoXY(3,0);
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidGotoXY>
			LCD_voidSendString("TEMP= ");
     c78:	80 ee       	ldi	r24, 0xE0	; 224
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
			LCD_voidIntDisplay(adc_val);
     c80:	c7 01       	movw	r24, r14
     c82:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_voidIntDisplay>
			
			DCMOTOR_voidInit() ;
     c86:	0e 94 86 08 	call	0x110c	; 0x110c <DCMOTOR_voidInit>
			if (adc_val>28)
     c8a:	2d e1       	ldi	r18, 0x1D	; 29
     c8c:	e2 16       	cp	r14, r18
     c8e:	f1 04       	cpc	r15, r1
     c90:	20 f0       	brcs	.+8      	; 0xc9a <__stack+0x43b>
			{
				DCMOTOR_voidForward(100) ;
     c92:	84 e6       	ldi	r24, 0x64	; 100
     c94:	0e 94 96 08 	call	0x112c	; 0x112c <DCMOTOR_voidForward>
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <__stack+0x441>
			}else DCMOTOR_voidForward(0) ;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 96 08 	call	0x112c	; 0x112c <DCMOTOR_voidForward>
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	93 ed       	ldi	r25, 0xD3	; 211
     ca4:	20 e3       	ldi	r18, 0x30	; 48
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	90 40       	sbci	r25, 0x00	; 0
     caa:	20 40       	sbci	r18, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <__stack+0x447>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <__stack+0x451>
     cb0:	00 00       	nop
			
			_delay_ms(1000);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
			condition =Run_time;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			while(optimal <10)
     cbe:	3b c0       	rjmp	.+118    	; 0xd36 <__stack+0x4d7>
			{
				if (optimal==1)
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	29 f4       	brne	.+10     	; 0xcce <__stack+0x46f>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN7);
     cc4:	67 e0       	ldi	r22, 0x07	; 7
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     ccc:	31 c0       	rjmp	.+98     	; 0xd30 <__stack+0x4d1>
				}else if (optimal==2)
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	29 f4       	brne	.+10     	; 0xcdc <__stack+0x47d>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN6);
     cd2:	66 e0       	ldi	r22, 0x06	; 6
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     cda:	2a c0       	rjmp	.+84     	; 0xd30 <__stack+0x4d1>
				}else if (optimal==3)
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	21 f4       	brne	.+8      	; 0xce8 <__stack+0x489>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN2);
     ce0:	62 e0       	ldi	r22, 0x02	; 2
     ce2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     ce6:	24 c0       	rjmp	.+72     	; 0xd30 <__stack+0x4d1>
				}
				else if (optimal==4)
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	29 f4       	brne	.+10     	; 0xcf6 <__stack+0x497>
				{
					DIO_voidTogglePinVal(DIO_PORTD,DIO_PIN3);
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <DIO_voidTogglePinVal>
     cf4:	1d c0       	rjmp	.+58     	; 0xd30 <__stack+0x4d1>
				}
				else if (optimal ==5)
     cf6:	85 30       	cpi	r24, 0x05	; 5
     cf8:	49 f4       	brne	.+18     	; 0xd0c <__stack+0x4ad>
				{
					LCD_voidSendCommand(LCD_CLEAR_COMMAND);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
					 LCD_voidInit();                      // in this line we use the re Intilization to fix the LCD  as it goes invalid after 2 intilization 
     d00:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_voidInit>
					 WDT_voidStart(Time_16_3ms );
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <WDT_voidStart>
     d0a:	ff cf       	rjmp	.-2      	; 0xd0a <__stack+0x4ab>
					 while(1);	
				}
				else if (optimal ==6)
     d0c:	86 30       	cpi	r24, 0x06	; 6
     d0e:	49 f4       	brne	.+18     	; 0xd22 <__stack+0x4c3>
				{
					Dimmer_value+=10;
     d10:	16 5f       	subi	r17, 0xF6	; 246
					if (Dimmer_value>=100)Dimmer_value=100;
     d12:	14 36       	cpi	r17, 0x64	; 100
     d14:	08 f0       	brcs	.+2      	; 0xd18 <__stack+0x4b9>
     d16:	14 e6       	ldi	r17, 0x64	; 100
					TIMER1_void10BitResFastPWM(OCR1B_PIN,Dimmer_value);
     d18:	61 2f       	mov	r22, r17
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <TIMER1_void10BitResFastPWM>
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <__stack+0x4d1>
				}
				else if (optimal ==7)
     d22:	87 30       	cpi	r24, 0x07	; 7
     d24:	29 f4       	brne	.+10     	; 0xd30 <__stack+0x4d1>
				{
					Dimmer_value-=10;
     d26:	1a 50       	subi	r17, 0x0A	; 10
					if (Dimmer_value<0)Dimmer_value=0;
					
					TIMER1_void10BitResFastPWM(OCR1B_PIN,Dimmer_value);
     d28:	61 2f       	mov	r22, r17
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <TIMER1_void10BitResFastPWM>
				}
				optimal=10;
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <optimal>
			}else DCMOTOR_voidForward(0) ;
			
			_delay_ms(1000);
			LCD_voidSendCommand(LCD_CLEAR_COMMAND);
			condition =Run_time;
			while(optimal <10)
     d36:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <optimal>
     d3a:	8a 30       	cpi	r24, 0x0A	; 10
     d3c:	08 f2       	brcs	.-126    	; 0xcc0 <__stack+0x461>
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	91 ee       	ldi	r25, 0xE1	; 225
     d42:	24 e0       	ldi	r18, 0x04	; 4
     d44:	81 50       	subi	r24, 0x01	; 1
     d46:	90 40       	sbci	r25, 0x00	; 0
     d48:	20 40       	sbci	r18, 0x00	; 0
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <__stack+0x4e5>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <__stack+0x4ef>
     d4e:	00 00       	nop
				}
				optimal=10;
			}
			_delay_ms(100);
		}
		while((condition==login ||condition==Run_time)&& admin >0)
     d50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	19 f0       	breq	.+6      	; 0xd5e <__stack+0x4ff>
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__stack+0x4ff>
     d5c:	1e ce       	rjmp	.-964    	; 0x99a <__stack+0x13b>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	81 11       	cpse	r24, r1
     d62:	49 cf       	rjmp	.-366    	; 0xbf6 <__stack+0x397>
     d64:	1a ce       	rjmp	.-972    	; 0x99a <__stack+0x13b>

00000d66 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	9c 01       	movw	r18, r24
     d6c:	fb 01       	movw	r30, r22
     d6e:	dc 01       	movw	r26, r24
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	cd 91       	ld	r28, X+
     d74:	dc 91       	ld	r29, X
     d76:	12 97       	sbiw	r26, 0x02	; 2
     d78:	d3 83       	std	Z+3, r29	; 0x03
     d7a:	c2 83       	std	Z+2, r28	; 0x02
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	95 83       	std	Z+5, r25	; 0x05
     d82:	84 83       	std	Z+4, r24	; 0x04
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	dc 01       	movw	r26, r24
     d8a:	13 96       	adiw	r26, 0x03	; 3
     d8c:	7c 93       	st	X, r23
     d8e:	6e 93       	st	-X, r22
     d90:	12 97       	sbiw	r26, 0x02	; 2
     d92:	7d 83       	std	Y+5, r23	; 0x05
     d94:	6c 83       	std	Y+4, r22	; 0x04
     d96:	31 87       	std	Z+9, r19	; 0x09
     d98:	20 87       	std	Z+8, r18	; 0x08
     d9a:	f9 01       	movw	r30, r18
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 83       	st	Z, r24
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     dae:	a0 85       	ldd	r26, Z+8	; 0x08
     db0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     db2:	c2 81       	ldd	r28, Z+2	; 0x02
     db4:	d3 81       	ldd	r29, Z+3	; 0x03
     db6:	84 81       	ldd	r24, Z+4	; 0x04
     db8:	95 81       	ldd	r25, Z+5	; 0x05
     dba:	9d 83       	std	Y+5, r25	; 0x05
     dbc:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     dbe:	c4 81       	ldd	r28, Z+4	; 0x04
     dc0:	d5 81       	ldd	r29, Z+5	; 0x05
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	12 97       	sbiw	r26, 0x02	; 2
     dd2:	e8 17       	cp	r30, r24
     dd4:	f9 07       	cpc	r31, r25
     dd6:	31 f4       	brne	.+12     	; 0xde4 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	95 81       	ldd	r25, Z+5	; 0x05
     ddc:	12 96       	adiw	r26, 0x02	; 2
     dde:	9c 93       	st	X, r25
     de0:	8e 93       	st	-X, r24
     de2:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     de4:	11 86       	std	Z+9, r1	; 0x09
     de6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     de8:	8c 91       	ld	r24, X
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	0f 92       	push	r0
     dfc:	1f 92       	push	r1
     dfe:	11 24       	eor	r1, r1
     e00:	2f 92       	push	r2
     e02:	3f 92       	push	r3
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
     e3c:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <pxCurrentTCB>
     e40:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <pxCurrentTCB+0x1>
     e44:	0d b6       	in	r0, 0x3d	; 61
     e46:	0d 92       	st	X+, r0
     e48:	0e b6       	in	r0, 0x3e	; 62
     e4a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e4c:	0e 94 78 07 	call	0xef0	; 0xef0 <xTaskIncrementTick>
     e50:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e52:	0e 94 32 08 	call	0x1064	; 0x1064 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e56:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <pxCurrentTCB>
     e5a:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <pxCurrentTCB+0x1>
     e5e:	cd 91       	ld	r28, X+
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	dd 91       	ld	r29, X+
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	9f 90       	pop	r9
     e94:	8f 90       	pop	r8
     e96:	7f 90       	pop	r7
     e98:	6f 90       	pop	r6
     e9a:	5f 90       	pop	r5
     e9c:	4f 90       	pop	r4
     e9e:	3f 90       	pop	r3
     ea0:	2f 90       	pop	r2
     ea2:	1f 90       	pop	r1
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     eaa:	08 95       	ret

00000eac <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     eac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vPortYieldFromTick>
		asm volatile ( "reti" );
     eb0:	18 95       	reti

00000eb2 <prvResetNextTaskUnblockTime>:

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
     eb2:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <pxDelayedTaskList>
     eb6:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <pxDelayedTaskList+0x1>
     eba:	80 81       	ld	r24, Z
     ebc:	81 11       	cpse	r24, r1
     ebe:	07 c0       	rjmp	.+14     	; 0xece <prvResetNextTaskUnblockTime+0x1c>
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <xNextTaskUnblockTime+0x1>
     ec8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <xNextTaskUnblockTime>
     ecc:	08 95       	ret
     ece:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <pxDelayedTaskList>
     ed2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <pxDelayedTaskList+0x1>
     ed6:	05 80       	ldd	r0, Z+5	; 0x05
     ed8:	f6 81       	ldd	r31, Z+6	; 0x06
     eda:	e0 2d       	mov	r30, r0
     edc:	06 80       	ldd	r0, Z+6	; 0x06
     ede:	f7 81       	ldd	r31, Z+7	; 0x07
     ee0:	e0 2d       	mov	r30, r0
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <xNextTaskUnblockTime+0x1>
     eea:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <xNextTaskUnblockTime>
     eee:	08 95       	ret

00000ef0 <xTaskIncrementTick>:
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <uxSchedulerSuspended>
     f02:	81 11       	cpse	r24, r1
     f04:	97 c0       	rjmp	.+302    	; 0x1034 <xTaskIncrementTick+0x144>
     f06:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <xTickCount>
     f0a:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <xTickCount+0x1>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	e8 1a       	sub	r14, r24
     f12:	f8 0a       	sbc	r15, r24
     f14:	f0 92 07 02 	sts	0x0207, r15	; 0x800207 <xTickCount+0x1>
     f18:	e0 92 06 02 	sts	0x0206, r14	; 0x800206 <xTickCount>
     f1c:	e1 14       	cp	r14, r1
     f1e:	f1 04       	cpc	r15, r1
     f20:	b9 f4       	brne	.+46     	; 0xf50 <xTaskIncrementTick+0x60>
     f22:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <pxDelayedTaskList>
     f26:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <pxDelayedTaskList+0x1>
     f2a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <pxOverflowDelayedTaskList>
     f2e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <pxOverflowDelayedTaskList+0x1>
     f32:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <pxDelayedTaskList+0x1>
     f36:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <pxDelayedTaskList>
     f3a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <pxOverflowDelayedTaskList+0x1>
     f3e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <pxOverflowDelayedTaskList>
     f42:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <xNumOfOverflows>
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <xNumOfOverflows>
     f4c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <prvResetNextTaskUnblockTime>
     f50:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <xNextTaskUnblockTime>
     f54:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <xNextTaskUnblockTime+0x1>
     f58:	e8 16       	cp	r14, r24
     f5a:	f9 06       	cpc	r15, r25
     f5c:	28 f4       	brcc	.+10     	; 0xf68 <xTaskIncrementTick+0x78>
     f5e:	d1 2c       	mov	r13, r1
     f60:	53 c0       	rjmp	.+166    	; 0x1008 <xTaskIncrementTick+0x118>
     f62:	dd 24       	eor	r13, r13
     f64:	d3 94       	inc	r13
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <xTaskIncrementTick+0x7a>
     f68:	d1 2c       	mov	r13, r1
     f6a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <pxDelayedTaskList>
     f6e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <pxDelayedTaskList+0x1>
     f72:	80 81       	ld	r24, Z
     f74:	81 11       	cpse	r24, r1
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <xTaskIncrementTick+0x96>
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
     f7c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <xNextTaskUnblockTime+0x1>
     f80:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <xNextTaskUnblockTime>
     f84:	41 c0       	rjmp	.+130    	; 0x1008 <xTaskIncrementTick+0x118>
     f86:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <pxDelayedTaskList>
     f8a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <pxDelayedTaskList+0x1>
     f8e:	05 80       	ldd	r0, Z+5	; 0x05
     f90:	f6 81       	ldd	r31, Z+6	; 0x06
     f92:	e0 2d       	mov	r30, r0
     f94:	c6 81       	ldd	r28, Z+6	; 0x06
     f96:	d7 81       	ldd	r29, Z+7	; 0x07
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	e8 16       	cp	r14, r24
     f9e:	f9 06       	cpc	r15, r25
     fa0:	28 f4       	brcc	.+10     	; 0xfac <xTaskIncrementTick+0xbc>
     fa2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <xNextTaskUnblockTime+0x1>
     fa6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <xNextTaskUnblockTime>
     faa:	2e c0       	rjmp	.+92     	; 0x1008 <xTaskIncrementTick+0x118>
     fac:	8e 01       	movw	r16, r28
     fae:	0e 5f       	subi	r16, 0xFE	; 254
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	c8 01       	movw	r24, r16
     fb4:	0e 94 d4 06 	call	0xda8	; 0xda8 <uxListRemove>
     fb8:	8c 89       	ldd	r24, Y+20	; 0x14
     fba:	9d 89       	ldd	r25, Y+21	; 0x15
     fbc:	89 2b       	or	r24, r25
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <xTaskIncrementTick+0xd8>
     fc0:	ce 01       	movw	r24, r28
     fc2:	0c 96       	adiw	r24, 0x0c	; 12
     fc4:	0e 94 d4 06 	call	0xda8	; 0xda8 <uxListRemove>
     fc8:	8e 89       	ldd	r24, Y+22	; 0x16
     fca:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <uxTopReadyPriority>
     fce:	98 17       	cp	r25, r24
     fd0:	10 f4       	brcc	.+4      	; 0xfd6 <xTaskIncrementTick+0xe6>
     fd2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <uxTopReadyPriority>
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9c 01       	movw	r18, r24
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	b8 01       	movw	r22, r16
     fec:	84 5f       	subi	r24, 0xF4	; 244
     fee:	9d 4f       	sbci	r25, 0xFD	; 253
     ff0:	0e 94 b3 06 	call	0xd66	; 0xd66 <vListInsertEnd>
     ff4:	9e 89       	ldd	r25, Y+22	; 0x16
     ff6:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <pxCurrentTCB>
     ffa:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <pxCurrentTCB+0x1>
     ffe:	86 89       	ldd	r24, Z+22	; 0x16
    1000:	98 17       	cp	r25, r24
    1002:	08 f0       	brcs	.+2      	; 0x1006 <xTaskIncrementTick+0x116>
    1004:	ae cf       	rjmp	.-164    	; 0xf62 <xTaskIncrementTick+0x72>
    1006:	b1 cf       	rjmp	.-158    	; 0xf6a <xTaskIncrementTick+0x7a>
    1008:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <pxCurrentTCB>
    100c:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <pxCurrentTCB+0x1>
    1010:	86 89       	ldd	r24, Z+22	; 0x16
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	fc 01       	movw	r30, r24
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	8e 0f       	add	r24, r30
    1024:	9f 1f       	adc	r25, r31
    1026:	fc 01       	movw	r30, r24
    1028:	e4 5f       	subi	r30, 0xF4	; 244
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	80 81       	ld	r24, Z
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	40 f4       	brcc	.+16     	; 0x1042 <xTaskIncrementTick+0x152>
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <xTaskIncrementTick+0x156>
    1034:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <uxPendedTicks>
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <uxPendedTicks>
    103e:	d1 2c       	mov	r13, r1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <xTaskIncrementTick+0x156>
    1042:	dd 24       	eor	r13, r13
    1044:	d3 94       	inc	r13
    1046:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xYieldPending>
    104a:	88 23       	and	r24, r24
    104c:	11 f0       	breq	.+4      	; 0x1052 <xTaskIncrementTick+0x162>
    104e:	dd 24       	eor	r13, r13
    1050:	d3 94       	inc	r13
    1052:	8d 2d       	mov	r24, r13
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	08 95       	ret

00001064 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1064:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <uxSchedulerSuspended>
    1068:	88 23       	and	r24, r24
    106a:	21 f0       	breq	.+8      	; 0x1074 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <xYieldPending>
    1072:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1074:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1078:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <uxTopReadyPriority>
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <vTaskSwitchContext+0x1c>
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	82 2f       	mov	r24, r18
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	e4 5f       	subi	r30, 0xF4	; 244
    1098:	fd 4f       	sbci	r31, 0xFD	; 253
    109a:	30 81       	ld	r19, Z
    109c:	33 23       	and	r19, r19
    109e:	79 f3       	breq	.-34     	; 0x107e <vTaskSwitchContext+0x1a>
    10a0:	ac 01       	movw	r20, r24
    10a2:	44 0f       	add	r20, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	44 0f       	add	r20, r20
    10a8:	55 1f       	adc	r21, r21
    10aa:	44 0f       	add	r20, r20
    10ac:	55 1f       	adc	r21, r21
    10ae:	48 0f       	add	r20, r24
    10b0:	59 1f       	adc	r21, r25
    10b2:	df 01       	movw	r26, r30
    10b4:	01 80       	ldd	r0, Z+1	; 0x01
    10b6:	f2 81       	ldd	r31, Z+2	; 0x02
    10b8:	e0 2d       	mov	r30, r0
    10ba:	02 80       	ldd	r0, Z+2	; 0x02
    10bc:	f3 81       	ldd	r31, Z+3	; 0x03
    10be:	e0 2d       	mov	r30, r0
    10c0:	12 96       	adiw	r26, 0x02	; 2
    10c2:	fc 93       	st	X, r31
    10c4:	ee 93       	st	-X, r30
    10c6:	11 97       	sbiw	r26, 0x01	; 1
    10c8:	41 5f       	subi	r20, 0xF1	; 241
    10ca:	5d 4f       	sbci	r21, 0xFD	; 253
    10cc:	e4 17       	cp	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	29 f4       	brne	.+10     	; 0x10dc <vTaskSwitchContext+0x78>
    10d2:	42 81       	ldd	r20, Z+2	; 0x02
    10d4:	53 81       	ldd	r21, Z+3	; 0x03
    10d6:	fd 01       	movw	r30, r26
    10d8:	52 83       	std	Z+2, r21	; 0x02
    10da:	41 83       	std	Z+1, r20	; 0x01
    10dc:	fc 01       	movw	r30, r24
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	8e 0f       	add	r24, r30
    10ec:	9f 1f       	adc	r25, r31
    10ee:	fc 01       	movw	r30, r24
    10f0:	e4 5f       	subi	r30, 0xF4	; 244
    10f2:	fd 4f       	sbci	r31, 0xFD	; 253
    10f4:	01 80       	ldd	r0, Z+1	; 0x01
    10f6:	f2 81       	ldd	r31, Z+2	; 0x02
    10f8:	e0 2d       	mov	r30, r0
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	97 81       	ldd	r25, Z+7	; 0x07
    10fe:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <pxCurrentTCB+0x1>
    1102:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <pxCurrentTCB>
    1106:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <uxTopReadyPriority>
    110a:	08 95       	ret

0000110c <DCMOTOR_voidInit>:

void DCMOTOR_voidInit(){
	
		/* set pins dir */
		
		DIO_VoidSetPinDir(DCMOTOR_EN1_PORT,DCMOTOR_EN1_PIN,OUTPUT) ;
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
		//DIO_VoidSetPinDir(DCMOTOR_EN2_PORT,DCMOTOR_EN2_PIN,OUTPUT) ;
		
		DIO_VoidSetPinDir(DCMOTOR_A1_PORT,DCMOTOR_A1_PIN,OUTPUT) ;
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	67 e0       	ldi	r22, 0x07	; 7
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
		DIO_VoidSetPinDir(DCMOTOR_A2_PORT,DCMOTOR_A2_PIN,OUTPUT) ;
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	64 e0       	ldi	r22, 0x04	; 4
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
    112a:	08 95       	ret

0000112c <DCMOTOR_voidForward>:

void  DCMOTOR_voidForward( u8 copy_u8speed){
	
       
		/*set motor1  speed */
	   TIMER0_voidFastPWM(TIMER0_PRESCALER_1024,copy_u8speed) ;  /* 0 ----> 100 */
    112c:	68 2f       	mov	r22, r24
    112e:	85 e0       	ldi	r24, 0x05	; 5
    1130:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <TIMER0_voidFastPWM>
	   /*Set motor2 speed */
	  // TIMER1_void10BitResFastPWM(OC1B_PIN,copy_u8speed) ; 
	   
	    /* MOTOR1 */
	   DIO_VoidSetPinVal(DCMOTOR_A1_PORT,DCMOTOR_A1_PIN,HIGH) ; 
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	67 e0       	ldi	r22, 0x07	; 7
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
	   DIO_VoidSetPinVal(DCMOTOR_A2_PORT,DCMOTOR_A2_PIN,LOW) ;
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	64 e0       	ldi	r22, 0x04	; 4
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    1148:	08 95       	ret

0000114a <EEPROM_voidSendData>:
#include "../LCD/LCD_interface.h"
#define  F_CPU 16000000UL 
#include <util/delay.h>


void EEPROM_voidSendData(u16 copy_u16address , u8 copy_u8data){
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	d8 2f       	mov	r29, r24
    1152:	c6 2f       	mov	r28, r22
	
	u8 loc_u8address=1010000 |(copy_u16address>>8) ;
    1154:	19 2f       	mov	r17, r25
    1156:	10 65       	ori	r17, 0x50	; 80
	/*send start condition */

	//TWI_TWI_ErrSendRepeatedStart();    //  ****** FOR EEPROM IF there is an other one on the bus ******
	TWI_TWI_ErrSendStartCondition();  
    1158:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_TWI_ErrSendStartCondition>
	
	/*Send device address with write request (slave address*/
	TWI_TWI_ErrMasterSendSlaveAddressWithWrite(loc_u8address);
    115c:	81 2f       	mov	r24, r17
    115e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TWI_TWI_ErrMasterSendSlaveAddressWithWrite>

	/*Send word address (master send data)*/
	TWI_TWI_ErrMasterSendData((u8)copy_u16address) ;
    1162:	8d 2f       	mov	r24, r29
    1164:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <TWI_TWI_ErrMasterSendData>
	
	/*Transmit byte data (master send data)*/
	TWI_TWI_ErrMasterSendData(copy_u8data) ; 
    1168:	8c 2f       	mov	r24, r28
    116a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <TWI_TWI_ErrMasterSendData>

	/*Send stop condition*/
	TWI_voidSendStopCondition() ; 
    116e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TWI_voidSendStopCondition>
    1172:	8f e3       	ldi	r24, 0x3F	; 63
    1174:	9c e9       	ldi	r25, 0x9C	; 156
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <EEPROM_voidSendData+0x2c>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <EEPROM_voidSendData+0x32>
    117c:	00 00       	nop
	
    _delay_ms(10) ; 	
	
	
	
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <EEPROM_voidReciveData>:


u8  EEPROM_voidReciveData(u16 copy_u16address) {
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	1f 92       	push	r1
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	08 2f       	mov	r16, r24
	
	
	u8 loc_u8address=1010000| copy_u16address>>8 ;
    1196:	19 2f       	mov	r17, r25
    1198:	10 65       	ori	r17, 0x50	; 80
	
	u8 loc_val=0 ; 
    119a:	19 82       	std	Y+1, r1	; 0x01
	/*send start condition */
	TWI_TWI_ErrSendStartCondition() ;
    119c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_TWI_ErrSendStartCondition>
	/*Send device address with write request (slave address*/
	TWI_TWI_ErrMasterSendSlaveAddressWithWrite(loc_u8address);
    11a0:	81 2f       	mov	r24, r17
    11a2:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TWI_TWI_ErrMasterSendSlaveAddressWithWrite>
	/*Send word address (master send data)*/
	TWI_TWI_ErrMasterSendData((u8)copy_u16address) ;
    11a6:	80 2f       	mov	r24, r16
    11a8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <TWI_TWI_ErrMasterSendData>
	/*Send repeated start condition*/
	TWI_TWI_ErrSendRepeatedStart() ; 
    11ac:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <TWI_TWI_ErrSendRepeatedStart>
	/*Send device address with read request*/
	TWI_TWI_ErrMasterSendSlaveAddressWithRead(loc_u8address) ; 
    11b0:	81 2f       	mov	r24, r17
    11b2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <TWI_TWI_ErrMasterSendSlaveAddressWithRead>
	/*Receive byte data*/
  
    TWI_TWI_ErrMasterReciveData(&loc_val) ; 
    11b6:	ce 01       	movw	r24, r28
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_TWI_ErrMasterReciveData>
	return loc_val ; 	
	
	
	
	
}
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	0f 90       	pop	r0
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <KEYPAD_voidInit>:





void KEYPAD_voidInit(void){
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	28 97       	sbiw	r28, 0x08	; 8
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
	
	#if       ROW_SIZE==4
		u8 ROW_ARR[ROW_SIZE]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ; 
    11e4:	84 e0       	ldi	r24, 0x04	; 4
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	87 e0       	ldi	r24, 0x07	; 7
    11f2:	8c 83       	std	Y+4, r24	; 0x04
	#elif     ROW_SIZE==3
		u8 ROW_ARR[ROW_SIZE]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN} ; 
	#endif
	#if     COL_SIZE ==4
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN}; 
    11f4:	1d 82       	std	Y+5, r1	; 0x05
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	8e 83       	std	Y+6, r24	; 0x06
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	8f 83       	std	Y+7, r24	; 0x07
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	88 87       	std	Y+8, r24	; 0x08
	#elif   COL_SIZE==3
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN}; 
	#endif
	u8 LOC_in_R=0 ; 
	u8 LOC_in_C=0 ; 
	for (LOC_in_R=0 ; LOC_in_R< ROW_SIZE ; LOC_in_R++)
    1202:	10 e0       	ldi	r17, 0x00	; 0
    1204:	12 c0       	rjmp	.+36     	; 0x122a <KEYPAD_voidInit+0x5e>
	{
		
		/* MAKE ROWS ----> INPUT */
		DIO_VoidSetPinDir(KEYPAD_ROW_PORT,ROW_ARR[LOC_in_R],INPUT) ; 
    1206:	e1 e0       	ldi	r30, 0x01	; 1
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	ec 0f       	add	r30, r28
    120c:	fd 1f       	adc	r31, r29
    120e:	e1 0f       	add	r30, r17
    1210:	f1 1d       	adc	r31, r1
    1212:	00 81       	ld	r16, Z
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	60 2f       	mov	r22, r16
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
		/* Active pull up resistor */
		DIO_VoidSetPinVal(KEYPAD_ROW_PORT,ROW_ARR[LOC_in_R],HIGH) ; 
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	60 2f       	mov	r22, r16
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
	#elif   COL_SIZE==3
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN}; 
	#endif
	u8 LOC_in_R=0 ; 
	u8 LOC_in_C=0 ; 
	for (LOC_in_R=0 ; LOC_in_R< ROW_SIZE ; LOC_in_R++)
    1228:	1f 5f       	subi	r17, 0xFF	; 255
    122a:	14 30       	cpi	r17, 0x04	; 4
    122c:	60 f3       	brcs	.-40     	; 0x1206 <KEYPAD_voidInit+0x3a>
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	12 c0       	rjmp	.+36     	; 0x1256 <KEYPAD_voidInit+0x8a>
		DIO_VoidSetPinVal(KEYPAD_ROW_PORT,ROW_ARR[LOC_in_R],HIGH) ; 
	}
	for (LOC_in_C=0 ; LOC_in_C< COL_SIZE ; LOC_in_C++)
	{
		/*make column ----> output */
		DIO_VoidSetPinDir(KEYPAD_COL_PORT,COL_ARR[LOC_in_C],OUTPUT) ; 
    1232:	e5 e0       	ldi	r30, 0x05	; 5
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	ec 0f       	add	r30, r28
    1238:	fd 1f       	adc	r31, r29
    123a:	e1 0f       	add	r30, r17
    123c:	f1 1d       	adc	r31, r1
    123e:	00 81       	ld	r16, Z
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	60 2f       	mov	r22, r16
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
		/* set all pins ----> HIGH */
		DIO_VoidSetPinVal(KEYPAD_COL_PORT,COL_ARR[LOC_in_C],HIGH)  ; 
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	60 2f       	mov	r22, r16
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
		/* MAKE ROWS ----> INPUT */
		DIO_VoidSetPinDir(KEYPAD_ROW_PORT,ROW_ARR[LOC_in_R],INPUT) ; 
		/* Active pull up resistor */
		DIO_VoidSetPinVal(KEYPAD_ROW_PORT,ROW_ARR[LOC_in_R],HIGH) ; 
	}
	for (LOC_in_C=0 ; LOC_in_C< COL_SIZE ; LOC_in_C++)
    1254:	1f 5f       	subi	r17, 0xFF	; 255
    1256:	14 30       	cpi	r17, 0x04	; 4
    1258:	60 f3       	brcs	.-40     	; 0x1232 <KEYPAD_voidInit+0x66>
		/*make column ----> output */
		DIO_VoidSetPinDir(KEYPAD_COL_PORT,COL_ARR[LOC_in_C],OUTPUT) ; 
		/* set all pins ----> HIGH */
		DIO_VoidSetPinVal(KEYPAD_COL_PORT,COL_ARR[LOC_in_C],HIGH)  ; 
	}	
}
    125a:	28 96       	adiw	r28, 0x08	; 8
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <KEYPAD_u8GetKey>:


u8 KEYPAD_u8GetKey(void){
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	28 97       	sbiw	r28, 0x08	; 8
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
	#if       ROW_SIZE==4
		u8 ROW_ARR[ROW_SIZE]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ; 
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	87 e0       	ldi	r24, 0x07	; 7
    12a2:	8c 83       	std	Y+4, r24	; 0x04
	#elif     ROW_SIZE==3
		u8 ROW_ARR[ROW_SIZE]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN} ; 
	#endif
	#if     COL_SIZE ==4
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN}; 
    12a4:	1d 82       	std	Y+5, r1	; 0x05
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	8e 83       	std	Y+6, r24	; 0x06
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	8f 83       	std	Y+7, r24	; 0x07
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	88 87       	std	Y+8, r24	; 0x08
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN}; 
	#endif
		u8 row_in=0 ; 
		u8 col_in=0 ; 
		u8 loc_val =0xff ; 
		for (col_in=0 ; col_in < COL_SIZE ; col_in++)
    12b2:	b1 2c       	mov	r11, r1
    12b4:	3b c0       	rjmp	.+118    	; 0x132c <KEYPAD_u8GetKey+0xbc>
		{
			
			DIO_VoidSetPinVal(KEYPAD_COL_PORT,COL_ARR[col_in],LOW) ; 
    12b6:	cb 2c       	mov	r12, r11
    12b8:	d1 2c       	mov	r13, r1
    12ba:	e5 e0       	ldi	r30, 0x05	; 5
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ec 0f       	add	r30, r28
    12c0:	fd 1f       	adc	r31, r29
    12c2:	ec 0d       	add	r30, r12
    12c4:	fd 1d       	adc	r31, r13
    12c6:	a0 80       	ld	r10, Z
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	6a 2d       	mov	r22, r10
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
			
			for (row_in=0 ; row_in <ROW_SIZE ; row_in++)
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	23 c0       	rjmp	.+70     	; 0x131c <KEYPAD_u8GetKey+0xac>
			{
				
				if (DIO_U8ReadPinVal(KEYPAD_ROW_PORT,ROW_ARR[row_in])==0)
    12d6:	e1 2e       	mov	r14, r17
    12d8:	f1 2c       	mov	r15, r1
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	ec 0f       	add	r30, r28
    12e0:	fd 1f       	adc	r31, r29
    12e2:	ee 0d       	add	r30, r14
    12e4:	ff 1d       	adc	r31, r15
    12e6:	00 81       	ld	r16, Z
    12e8:	60 2f       	mov	r22, r16
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	0e 94 94 0c 	call	0x1928	; 0x1928 <DIO_U8ReadPinVal>
    12f0:	81 11       	cpse	r24, r1
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <KEYPAD_u8GetKey+0xaa>
				{
					
					loc_val=KEYPAD_DATA[row_in][col_in] ; 
    12f4:	c7 01       	movw	r24, r14
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	8f 59       	subi	r24, 0x9F	; 159
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	fc 01       	movw	r30, r24
    1304:	ec 0d       	add	r30, r12
    1306:	fd 1d       	adc	r31, r13
    1308:	10 81       	ld	r17, Z
					 while(DIO_U8ReadPinVal(KEYPAD_ROW_PORT,ROW_ARR[row_in])==0); 
    130a:	60 2f       	mov	r22, r16
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	0e 94 94 0c 	call	0x1928	; 0x1928 <DIO_U8ReadPinVal>
    1312:	88 23       	and	r24, r24
    1314:	d1 f3       	breq	.-12     	; 0x130a <KEYPAD_u8GetKey+0x9a>
					return loc_val ; 
    1316:	81 2f       	mov	r24, r17
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <KEYPAD_u8GetKey+0xc4>
		for (col_in=0 ; col_in < COL_SIZE ; col_in++)
		{
			
			DIO_VoidSetPinVal(KEYPAD_COL_PORT,COL_ARR[col_in],LOW) ; 
			
			for (row_in=0 ; row_in <ROW_SIZE ; row_in++)
    131a:	1f 5f       	subi	r17, 0xFF	; 255
    131c:	14 30       	cpi	r17, 0x04	; 4
    131e:	d8 f2       	brcs	.-74     	; 0x12d6 <KEYPAD_u8GetKey+0x66>
				}
				
				
			}
			
				DIO_VoidSetPinVal(KEYPAD_COL_PORT,COL_ARR[col_in],HIGH) ; 
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	6a 2d       	mov	r22, r10
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
		u8 COL_ARR[COL_SIZE]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN}; 
	#endif
		u8 row_in=0 ; 
		u8 col_in=0 ; 
		u8 loc_val =0xff ; 
		for (col_in=0 ; col_in < COL_SIZE ; col_in++)
    132a:	b3 94       	inc	r11
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	8b 15       	cp	r24, r11
    1330:	10 f6       	brcc	.-124    	; 0x12b6 <KEYPAD_u8GetKey+0x46>
			
			
		}
			
		
	return loc_val ; 
    1332:	8f ef       	ldi	r24, 0xFF	; 255
}
    1334:	28 96       	adiw	r28, 0x08	; 8
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	08 95       	ret

00001356 <LCD_SHDATA>:
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 d0       	rcall	.+0      	; 0x1360 <LCD_SHDATA+0xa>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <LCD_SHDATA+0xc>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	08 2f       	mov	r16, r24
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	8a 83       	std	Y+2, r24	; 0x02
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	87 e0       	ldi	r24, 0x07	; 7
    1376:	8c 83       	std	Y+4, r24	; 0x04
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <LCD_SHDATA+0x4e>
    137c:	40 2f       	mov	r20, r16
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	01 2e       	mov	r0, r17
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <LCD_SHDATA+0x32>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <LCD_SHDATA+0x2e>
    138c:	41 70       	andi	r20, 0x01	; 1
    138e:	e1 e0       	ldi	r30, 0x01	; 1
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	ec 0f       	add	r30, r28
    1394:	fd 1f       	adc	r31, r29
    1396:	e1 0f       	add	r30, r17
    1398:	f1 1d       	adc	r31, r1
    139a:	60 81       	ld	r22, Z
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    13a2:	1f 5f       	subi	r17, 0xFF	; 255
    13a4:	14 30       	cpi	r17, 0x04	; 4
    13a6:	50 f3       	brcs	.-44     	; 0x137c <LCD_SHDATA+0x26>
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <LCD_voidSendEnablePulse>:
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    13c4:	8f e3       	ldi	r24, 0x3F	; 63
    13c6:	9f e1       	ldi	r25, 0x1F	; 31
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCD_voidSendEnablePulse+0xe>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <LCD_voidSendEnablePulse+0x14>
    13ce:	00 00       	nop
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    13da:	08 95       	ret

000013dc <LCD_voidSendCommand>:
    13dc:	cf 93       	push	r28
    13de:	c8 2f       	mov	r28, r24
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    13f4:	8c 2f       	mov	r24, r28
    13f6:	82 95       	swap	r24
    13f8:	8f 70       	andi	r24, 0x0F	; 15
    13fa:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    13fe:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    1402:	8c 2f       	mov	r24, r28
    1404:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    1408:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <LCD_voidInit>:
    1410:	2f ef       	ldi	r18, 0xFF	; 255
    1412:	83 ef       	ldi	r24, 0xF3	; 243
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	21 50       	subi	r18, 0x01	; 1
    1418:	80 40       	sbci	r24, 0x00	; 0
    141a:	90 40       	sbci	r25, 0x00	; 0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <LCD_voidInit+0x6>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <LCD_voidInit+0x10>
    1420:	00 00       	nop
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	62 e0       	ldi	r22, 0x02	; 2
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
    1440:	60 ef       	ldi	r22, 0xF0	; 240
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 c6 0c 	call	0x198c	; 0x198c <DIO_VoidSetPortDir>
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    144e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    1458:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    1462:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    1466:	2f ef       	ldi	r18, 0xFF	; 255
    1468:	83 ef       	ldi	r24, 0xF3	; 243
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	21 50       	subi	r18, 0x01	; 1
    146e:	80 40       	sbci	r24, 0x00	; 0
    1470:	90 40       	sbci	r25, 0x00	; 0
    1472:	e1 f7       	brne	.-8      	; 0x146c <LCD_voidInit+0x5c>
    1474:	00 c0       	rjmp	.+0      	; 0x1476 <LCD_voidInit+0x66>
    1476:	00 00       	nop
    1478:	8e e0       	ldi	r24, 0x0E	; 14
    147a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
    147e:	8f e0       	ldi	r24, 0x0F	; 15
    1480:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
    148a:	08 95       	ret

0000148c <LCD_voidSendData>:
    148c:	cf 93       	push	r28
    148e:	c8 2f       	mov	r28, r24
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinVal>
    14a4:	8c 2f       	mov	r24, r28
    14a6:	82 95       	swap	r24
    14a8:	8f 70       	andi	r24, 0x0F	; 15
    14aa:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    14ae:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    14b2:	8c 2f       	mov	r24, r28
    14b4:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_SHDATA>
    14b8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_voidSendEnablePulse>
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <LCD_voidSendString>:
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	8c 01       	movw	r16, r24
    14c8:	c0 e0       	ldi	r28, 0x00	; 0
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <LCD_voidSendString+0x12>
    14cc:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_voidSendData>
    14d0:	cf 5f       	subi	r28, 0xFF	; 255
    14d2:	f8 01       	movw	r30, r16
    14d4:	ec 0f       	add	r30, r28
    14d6:	f1 1d       	adc	r31, r1
    14d8:	80 81       	ld	r24, Z
    14da:	81 11       	cpse	r24, r1
    14dc:	f7 cf       	rjmp	.-18     	; 0x14cc <LCD_voidSendString+0xc>
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <LCD_voidGotoXY>:
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <LCD_voidGotoXY+0x12>
    14ea:	58 f0       	brcs	.+22     	; 0x1502 <LCD_voidGotoXY+0x1c>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	31 f0       	breq	.+12     	; 0x14fc <LCD_voidGotoXY+0x16>
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	31 f0       	breq	.+12     	; 0x1500 <LCD_voidGotoXY+0x1a>
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <LCD_voidGotoXY+0x1c>
    14f8:	60 5c       	subi	r22, 0xC0	; 192
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <LCD_voidGotoXY+0x1c>
    14fc:	6c 5e       	subi	r22, 0xEC	; 236
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <LCD_voidGotoXY+0x1c>
    1500:	6c 5a       	subi	r22, 0xAC	; 172
    1502:	86 2f       	mov	r24, r22
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_voidSendCommand>
    150a:	08 95       	ret

0000150c <LCD_voidIntDisplay>:
	 LCD_voidSendString(new_arr); 
	 free(new_arr);
}
*/
void LCD_voidIntDisplay(u16 copy_u8int)
{
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	00 d0       	rcall	.+0      	; 0x1514 <LCD_voidIntDisplay+0x8>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <LCD_voidIntDisplay+0xa>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <LCD_voidIntDisplay+0xc>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	ac 01       	movw	r20, r24
	char new_arr[6];  // Max 5 digits + null terminator (u16 max: 65535)
	u8 i = 0;

	// Handle zero separately
	if (copy_u8int == 0)
    151e:	89 2b       	or	r24, r25
    1520:	99 f5       	brne	.+102    	; 0x1588 <LCD_voidIntDisplay+0x7c>
	{
		LCD_voidSendString("0");
    1522:	87 ee       	ldi	r24, 0xE7	; 231
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
    152a:	5c c0       	rjmp	.+184    	; 0x15e4 <LCD_voidIntDisplay+0xd8>

	// Convert integer to string (reverse order)
	u16 num = copy_u8int;
	while (num > 0)
	{
		new_arr[i++] = (num % 10) + '0';
    152c:	9a 01       	movw	r18, r20
    152e:	ad ec       	ldi	r26, 0xCD	; 205
    1530:	bc ec       	ldi	r27, 0xCC	; 204
    1532:	0e 94 02 11 	call	0x2204	; 0x2204 <__umulhisi3>
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	9c 01       	movw	r18, r24
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	82 0f       	add	r24, r18
    1556:	93 1f       	adc	r25, r19
    1558:	9a 01       	movw	r18, r20
    155a:	28 1b       	sub	r18, r24
    155c:	39 0b       	sbc	r19, r25
    155e:	c9 01       	movw	r24, r18
    1560:	e1 e0       	ldi	r30, 0x01	; 1
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	ec 0f       	add	r30, r28
    1566:	fd 1f       	adc	r31, r29
    1568:	e1 0f       	add	r30, r17
    156a:	f1 1d       	adc	r31, r1
    156c:	80 5d       	subi	r24, 0xD0	; 208
    156e:	80 83       	st	Z, r24
		num /= 10;
    1570:	9a 01       	movw	r18, r20
    1572:	0e 94 02 11 	call	0x2204	; 0x2204 <__umulhisi3>
    1576:	ac 01       	movw	r20, r24
    1578:	56 95       	lsr	r21
    157a:	47 95       	ror	r20
    157c:	56 95       	lsr	r21
    157e:	47 95       	ror	r20
    1580:	56 95       	lsr	r21
    1582:	47 95       	ror	r20

	// Convert integer to string (reverse order)
	u16 num = copy_u8int;
	while (num > 0)
	{
		new_arr[i++] = (num % 10) + '0';
    1584:	1f 5f       	subi	r17, 0xFF	; 255
    1586:	01 c0       	rjmp	.+2      	; 0x158a <LCD_voidIntDisplay+0x7e>
    1588:	10 e0       	ldi	r17, 0x00	; 0
		return;
	}

	// Convert integer to string (reverse order)
	u16 num = copy_u8int;
	while (num > 0)
    158a:	41 15       	cp	r20, r1
    158c:	51 05       	cpc	r21, r1
    158e:	71 f6       	brne	.-100    	; 0x152c <LCD_voidIntDisplay+0x20>
	{
		new_arr[i++] = (num % 10) + '0';
		num /= 10;
	}
	new_arr[i] = '\0';
    1590:	41 2f       	mov	r20, r17
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	e1 e0       	ldi	r30, 0x01	; 1
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	ec 0f       	add	r30, r28
    159a:	fd 1f       	adc	r31, r29
    159c:	e4 0f       	add	r30, r20
    159e:	f5 1f       	adc	r31, r21
    15a0:	10 82       	st	Z, r1

	// Reverse the string in-place
	for (u8 j = 0; j < i / 2; j++)
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	17 c0       	rjmp	.+46     	; 0x15d4 <LCD_voidIntDisplay+0xc8>
	{
		char temp = new_arr[j];
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	a1 e0       	ldi	r26, 0x01	; 1
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ac 0f       	add	r26, r28
    15b0:	bd 1f       	adc	r27, r29
    15b2:	a2 0f       	add	r26, r18
    15b4:	b3 1f       	adc	r27, r19
    15b6:	9c 91       	ld	r25, X
		new_arr[j] = new_arr[i - j - 1];
    15b8:	fa 01       	movw	r30, r20
    15ba:	e2 1b       	sub	r30, r18
    15bc:	f3 0b       	sbc	r31, r19
    15be:	31 97       	sbiw	r30, 0x01	; 1
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	2c 0f       	add	r18, r28
    15c6:	3d 1f       	adc	r19, r29
    15c8:	e2 0f       	add	r30, r18
    15ca:	f3 1f       	adc	r31, r19
    15cc:	20 81       	ld	r18, Z
    15ce:	2c 93       	st	X, r18
		new_arr[i - j - 1] = temp;
    15d0:	90 83       	st	Z, r25
		num /= 10;
	}
	new_arr[i] = '\0';

	// Reverse the string in-place
	for (u8 j = 0; j < i / 2; j++)
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	91 2f       	mov	r25, r17
    15d6:	96 95       	lsr	r25
    15d8:	89 17       	cp	r24, r25
    15da:	28 f3       	brcs	.-54     	; 0x15a6 <LCD_voidIntDisplay+0x9a>
		new_arr[j] = new_arr[i - j - 1];
		new_arr[i - j - 1] = temp;
	}

	// Send to LCD
	LCD_voidSendString(new_arr);
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_voidSendString>
}
    15e4:	26 96       	adiw	r28, 0x06	; 6
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	08 95       	ret

000015f8 <SERVO_voidSetAngle>:
	}

}


void SERVO_voidSetAngle(u8 angle ,u8 copy_u8TIM1pin) {
    15f8:	cf 93       	push	r28
    15fa:	c6 2f       	mov	r28, r22
	if (angle > 180) angle = 180;  // Limit angle range
    15fc:	85 3b       	cpi	r24, 0xB5	; 181
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <SERVO_voidSetAngle+0xa>
    1600:	84 eb       	ldi	r24, 0xB4	; 180
	
	// Convert angle (1ms = 1000, 2ms = 2000)
	u16 duty =(u16) (2000 + ((u32)angle * 2000) / 180);
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	a0 ed       	ldi	r26, 0xD0	; 208
    1608:	b7 e0       	ldi	r27, 0x07	; 7
    160a:	0e 94 02 11 	call	0x2204	; 0x2204 <__umulhisi3>
    160e:	24 eb       	ldi	r18, 0xB4	; 180
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__udivmodsi4>
    161a:	c9 01       	movw	r24, r18
    161c:	80 53       	subi	r24, 0x30	; 48
    161e:	98 4f       	sbci	r25, 0xF8	; 248
	 TIMER1_voidSetOCRVal(duty,copy_u8TIM1pin);
    1620:	6c 2f       	mov	r22, r28
    1622:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <TIMER1_voidSetOCRVal>
}
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <SERVO_voidinit>:
#include "../../MCAL/TIMER1/TIMER1_interface.h"
#include "SERVO_config.h"
#include "SERVO_interface.h"
void SERVO_voidinit() {
	// Set PD5 (OC1A) as output
	DIO_VoidSetPinDir(SERVO_PORT,SERVO_PIN,OUTPUT);
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	65 e0       	ldi	r22, 0x05	; 5
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <DIO_VoidSetPinDir>
	// Set Timer1 for Fast PWM, 20ms period (50Hz)
	TIMER1_voidFastPWM_ICR();
    1634:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <TIMER1_voidFastPWM_ICR>
	// Default to 90-degree position
	//SERVO_voidSetAngle(90, OCR1A_PIN);
	switch(SERVO_PIN)
	{
		case DIO_PIN5 :	SERVO_voidSetAngle(90, OCR1A_PIN);break;
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	8a e5       	ldi	r24, 0x5A	; 90
    163c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <SERVO_voidSetAngle>
    1640:	08 95       	ret

00001642 <ADC_voidInit>:


void ADC_voidInit(void){
	
	/* select reference volt :AVCC with external capacitor at AREF pin */
	   SET_BIT(ADMUX_REG,6) ; 
    1642:	87 b1       	in	r24, 0x07	; 7
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	87 b9       	out	0x07, r24	; 7
	   CLR_BIT(ADMUX_REG,7) ; 
    1648:	87 b1       	in	r24, 0x07	; 7
    164a:	8f 77       	andi	r24, 0x7F	; 127
    164c:	87 b9       	out	0x07, r24	; 7
	   
	   /*  set adc prescaler */
	
	    ADCSRA_REG &=0b11111000 ; 
    164e:	86 b1       	in	r24, 0x06	; 6
    1650:	88 7f       	andi	r24, 0xF8	; 248
    1652:	86 b9       	out	0x06, r24	; 6
		ADCSRA_REG|=ADC_PRESCALER ; 
    1654:	86 b1       	in	r24, 0x06	; 6
    1656:	87 60       	ori	r24, 0x07	; 7
    1658:	86 b9       	out	0x06, r24	; 6

	/*ADC enable */
	
	SET_BIT(ADCSRA_REG,7) ; 
    165a:	86 b1       	in	r24, 0x06	; 6
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	86 b9       	out	0x06, r24	; 6
    1660:	08 95       	ret

00001662 <ADC_u16ReadChannel>:


u16 ADC_u16ReadChannel(u8 copy_u8channel){
	
	/* select adc channel */
	ADMUX_REG&=0b11100000 ; 
    1662:	97 b1       	in	r25, 0x07	; 7
    1664:	90 7e       	andi	r25, 0xE0	; 224
    1666:	97 b9       	out	0x07, r25	; 7
	ADMUX_REG|=copy_u8channel ; 
    1668:	97 b1       	in	r25, 0x07	; 7
    166a:	89 2b       	or	r24, r25
    166c:	87 b9       	out	0x07, r24	; 7
	
	/* start conversion */
	SET_BIT(ADCSRA_REG,6) ; 
    166e:	86 b1       	in	r24, 0x06	; 6
    1670:	80 64       	ori	r24, 0x40	; 64
    1672:	86 b9       	out	0x06, r24	; 6
	
	while(GET_BIT(ADCSRA_REG,4)==1) ; 
    1674:	34 99       	sbic	0x06, 4	; 6
    1676:	fe cf       	rjmp	.-4      	; 0x1674 <ADC_u16ReadChannel+0x12>
	
	
	return ADC_REG ; 
    1678:	84 b1       	in	r24, 0x04	; 4
    167a:	95 b1       	in	r25, 0x05	; 5
	
	
}
    167c:	08 95       	ret

0000167e <__vector_16>:
	val= (u16)(((u32)(input - input_min) * (output_max - output_min)) / (input_max - input_min) + output_min);
	return val;
}
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
	ADC_DATA = ADC_DATA_REG;
    16a0:	84 b1       	in	r24, 0x04	; 4
    16a2:	95 b1       	in	r25, 0x05	; 5
    16a4:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <ADC_DATA+0x1>
    16a8:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ADC_DATA>
	if (ADC_callback != null)
    16ac:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <ADC_callback>
    16b0:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <ADC_callback+0x1>
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	29 f0       	breq	.+10     	; 0x16c2 <__vector_16+0x44>
	{
		ADC_callback(ADC_DATA);
    16b8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ADC_DATA>
    16bc:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <ADC_DATA+0x1>
    16c0:	09 95       	icall
	}
}
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <DIO_VoidSetPinDir>:
	switch(copy_u8port)
	{
		case DIO_PORTA:  PORTA_Reg=copy_u8val;break;
		case DIO_PORTB:  PORTB_Reg=copy_u8val;break;
		case DIO_PORTC:  PORTC_Reg=copy_u8val;break;
		case DIO_PORTD:  PORTD_Reg=copy_u8val;break;
    16e4:	68 30       	cpi	r22, 0x08	; 8
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <DIO_VoidSetPinDir+0x6>
    16e8:	72 c0       	rjmp	.+228    	; 0x17ce <DIO_VoidSetPinDir+0xea>
    16ea:	41 30       	cpi	r20, 0x01	; 1
    16ec:	b9 f5       	brne	.+110    	; 0x175c <DIO_VoidSetPinDir+0x78>
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	91 f0       	breq	.+36     	; 0x1716 <DIO_VoidSetPinDir+0x32>
    16f2:	28 f0       	brcs	.+10     	; 0x16fe <DIO_VoidSetPinDir+0x1a>
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	d9 f0       	breq	.+54     	; 0x172e <DIO_VoidSetPinDir+0x4a>
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	29 f1       	breq	.+74     	; 0x1746 <DIO_VoidSetPinDir+0x62>
    16fc:	2f c0       	rjmp	.+94     	; 0x175c <DIO_VoidSetPinDir+0x78>
    16fe:	9a b3       	in	r25, 0x1a	; 26
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	06 2e       	mov	r0, r22
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_VoidSetPinDir+0x28>
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_VoidSetPinDir+0x24>
    1710:	29 2b       	or	r18, r25
    1712:	2a bb       	out	0x1a, r18	; 26
    1714:	23 c0       	rjmp	.+70     	; 0x175c <DIO_VoidSetPinDir+0x78>
    1716:	97 b3       	in	r25, 0x17	; 23
    1718:	21 e0       	ldi	r18, 0x01	; 1
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	06 2e       	mov	r0, r22
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_VoidSetPinDir+0x40>
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_VoidSetPinDir+0x3c>
    1728:	29 2b       	or	r18, r25
    172a:	27 bb       	out	0x17, r18	; 23
    172c:	17 c0       	rjmp	.+46     	; 0x175c <DIO_VoidSetPinDir+0x78>
    172e:	94 b3       	in	r25, 0x14	; 20
    1730:	21 e0       	ldi	r18, 0x01	; 1
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	06 2e       	mov	r0, r22
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_VoidSetPinDir+0x58>
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_VoidSetPinDir+0x54>
    1740:	29 2b       	or	r18, r25
    1742:	24 bb       	out	0x14, r18	; 20
    1744:	0b c0       	rjmp	.+22     	; 0x175c <DIO_VoidSetPinDir+0x78>
    1746:	91 b3       	in	r25, 0x11	; 17
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	06 2e       	mov	r0, r22
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_VoidSetPinDir+0x70>
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_VoidSetPinDir+0x6c>
    1758:	29 2b       	or	r18, r25
    175a:	21 bb       	out	0x11, r18	; 17
    175c:	41 11       	cpse	r20, r1
    175e:	37 c0       	rjmp	.+110    	; 0x17ce <DIO_VoidSetPinDir+0xea>
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 f0       	breq	.+36     	; 0x1788 <DIO_VoidSetPinDir+0xa4>
    1764:	28 f0       	brcs	.+10     	; 0x1770 <DIO_VoidSetPinDir+0x8c>
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	d9 f0       	breq	.+54     	; 0x17a0 <DIO_VoidSetPinDir+0xbc>
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	29 f1       	breq	.+74     	; 0x17b8 <DIO_VoidSetPinDir+0xd4>
    176e:	08 95       	ret
    1770:	2a b3       	in	r18, 0x1a	; 26
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_VoidSetPinDir+0x98>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	6a 95       	dec	r22
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_VoidSetPinDir+0x94>
    1780:	80 95       	com	r24
    1782:	82 23       	and	r24, r18
    1784:	8a bb       	out	0x1a, r24	; 26
    1786:	08 95       	ret
    1788:	27 b3       	in	r18, 0x17	; 23
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_VoidSetPinDir+0xb0>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	6a 95       	dec	r22
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_VoidSetPinDir+0xac>
    1798:	80 95       	com	r24
    179a:	82 23       	and	r24, r18
    179c:	87 bb       	out	0x17, r24	; 23
    179e:	08 95       	ret
    17a0:	24 b3       	in	r18, 0x14	; 20
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_VoidSetPinDir+0xc8>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	6a 95       	dec	r22
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_VoidSetPinDir+0xc4>
    17b0:	80 95       	com	r24
    17b2:	82 23       	and	r24, r18
    17b4:	84 bb       	out	0x14, r24	; 20
    17b6:	08 95       	ret
    17b8:	21 b3       	in	r18, 0x11	; 17
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_VoidSetPinDir+0xe0>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	6a 95       	dec	r22
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_VoidSetPinDir+0xdc>
    17c8:	80 95       	com	r24
    17ca:	82 23       	and	r24, r18
    17cc:	81 bb       	out	0x11, r24	; 17
    17ce:	08 95       	ret

000017d0 <DIO_VoidSetPinVal>:
    17d0:	68 30       	cpi	r22, 0x08	; 8
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <DIO_VoidSetPinVal+0x6>
    17d4:	72 c0       	rjmp	.+228    	; 0x18ba <DIO_VoidSetPinVal+0xea>
    17d6:	41 30       	cpi	r20, 0x01	; 1
    17d8:	b9 f5       	brne	.+110    	; 0x1848 <DIO_VoidSetPinVal+0x78>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 f0       	breq	.+36     	; 0x1802 <DIO_VoidSetPinVal+0x32>
    17de:	28 f0       	brcs	.+10     	; 0x17ea <DIO_VoidSetPinVal+0x1a>
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	d9 f0       	breq	.+54     	; 0x181a <DIO_VoidSetPinVal+0x4a>
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	29 f1       	breq	.+74     	; 0x1832 <DIO_VoidSetPinVal+0x62>
    17e8:	2f c0       	rjmp	.+94     	; 0x1848 <DIO_VoidSetPinVal+0x78>
    17ea:	9b b3       	in	r25, 0x1b	; 27
    17ec:	21 e0       	ldi	r18, 0x01	; 1
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	06 2e       	mov	r0, r22
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_VoidSetPinVal+0x28>
    17f4:	22 0f       	add	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_VoidSetPinVal+0x24>
    17fc:	29 2b       	or	r18, r25
    17fe:	2b bb       	out	0x1b, r18	; 27
    1800:	23 c0       	rjmp	.+70     	; 0x1848 <DIO_VoidSetPinVal+0x78>
    1802:	98 b3       	in	r25, 0x18	; 24
    1804:	21 e0       	ldi	r18, 0x01	; 1
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	06 2e       	mov	r0, r22
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_VoidSetPinVal+0x40>
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_VoidSetPinVal+0x3c>
    1814:	29 2b       	or	r18, r25
    1816:	28 bb       	out	0x18, r18	; 24
    1818:	17 c0       	rjmp	.+46     	; 0x1848 <DIO_VoidSetPinVal+0x78>
    181a:	95 b3       	in	r25, 0x15	; 21
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	06 2e       	mov	r0, r22
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_VoidSetPinVal+0x58>
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_VoidSetPinVal+0x54>
    182c:	29 2b       	or	r18, r25
    182e:	25 bb       	out	0x15, r18	; 21
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <DIO_VoidSetPinVal+0x78>
    1832:	92 b3       	in	r25, 0x12	; 18
    1834:	21 e0       	ldi	r18, 0x01	; 1
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	06 2e       	mov	r0, r22
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_VoidSetPinVal+0x70>
    183c:	22 0f       	add	r18, r18
    183e:	33 1f       	adc	r19, r19
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_VoidSetPinVal+0x6c>
    1844:	29 2b       	or	r18, r25
    1846:	22 bb       	out	0x12, r18	; 18
    1848:	41 11       	cpse	r20, r1
    184a:	37 c0       	rjmp	.+110    	; 0x18ba <DIO_VoidSetPinVal+0xea>
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 f0       	breq	.+36     	; 0x1874 <DIO_VoidSetPinVal+0xa4>
    1850:	28 f0       	brcs	.+10     	; 0x185c <DIO_VoidSetPinVal+0x8c>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	d9 f0       	breq	.+54     	; 0x188c <DIO_VoidSetPinVal+0xbc>
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	29 f1       	breq	.+74     	; 0x18a4 <DIO_VoidSetPinVal+0xd4>
    185a:	08 95       	ret
    185c:	2b b3       	in	r18, 0x1b	; 27
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_VoidSetPinVal+0x98>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	6a 95       	dec	r22
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_VoidSetPinVal+0x94>
    186c:	80 95       	com	r24
    186e:	82 23       	and	r24, r18
    1870:	8b bb       	out	0x1b, r24	; 27
    1872:	08 95       	ret
    1874:	28 b3       	in	r18, 0x18	; 24
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_VoidSetPinVal+0xb0>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	6a 95       	dec	r22
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_VoidSetPinVal+0xac>
    1884:	80 95       	com	r24
    1886:	82 23       	and	r24, r18
    1888:	88 bb       	out	0x18, r24	; 24
    188a:	08 95       	ret
    188c:	25 b3       	in	r18, 0x15	; 21
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_VoidSetPinVal+0xc8>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	6a 95       	dec	r22
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_VoidSetPinVal+0xc4>
    189c:	80 95       	com	r24
    189e:	82 23       	and	r24, r18
    18a0:	85 bb       	out	0x15, r24	; 21
    18a2:	08 95       	ret
    18a4:	22 b3       	in	r18, 0x12	; 18
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_VoidSetPinVal+0xe0>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	6a 95       	dec	r22
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_VoidSetPinVal+0xdc>
    18b4:	80 95       	com	r24
    18b6:	82 23       	and	r24, r18
    18b8:	82 bb       	out	0x12, r24	; 18
    18ba:	08 95       	ret

000018bc <DIO_voidTogglePinVal>:
    18bc:	68 30       	cpi	r22, 0x08	; 8
    18be:	98 f5       	brcc	.+102    	; 0x1926 <DIO_voidTogglePinVal+0x6a>
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	89 f0       	breq	.+34     	; 0x18e6 <DIO_voidTogglePinVal+0x2a>
    18c4:	28 f0       	brcs	.+10     	; 0x18d0 <DIO_voidTogglePinVal+0x14>
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	c9 f0       	breq	.+50     	; 0x18fc <DIO_voidTogglePinVal+0x40>
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	11 f1       	breq	.+68     	; 0x1912 <DIO_voidTogglePinVal+0x56>
    18ce:	08 95       	ret
    18d0:	2b b3       	in	r18, 0x1b	; 27
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_voidTogglePinVal+0x20>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	6a 95       	dec	r22
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_voidTogglePinVal+0x1c>
    18e0:	82 27       	eor	r24, r18
    18e2:	8b bb       	out	0x1b, r24	; 27
    18e4:	08 95       	ret
    18e6:	28 b3       	in	r18, 0x18	; 24
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_voidTogglePinVal+0x36>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	6a 95       	dec	r22
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_voidTogglePinVal+0x32>
    18f6:	82 27       	eor	r24, r18
    18f8:	88 bb       	out	0x18, r24	; 24
    18fa:	08 95       	ret
    18fc:	25 b3       	in	r18, 0x15	; 21
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_voidTogglePinVal+0x4c>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	6a 95       	dec	r22
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_voidTogglePinVal+0x48>
    190c:	82 27       	eor	r24, r18
    190e:	85 bb       	out	0x15, r24	; 21
    1910:	08 95       	ret
    1912:	22 b3       	in	r18, 0x12	; 18
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_voidTogglePinVal+0x62>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	6a 95       	dec	r22
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_voidTogglePinVal+0x5e>
    1922:	82 27       	eor	r24, r18
    1924:	82 bb       	out	0x12, r24	; 18
    1926:	08 95       	ret

00001928 <DIO_U8ReadPinVal>:
    1928:	68 30       	cpi	r22, 0x08	; 8
    192a:	60 f5       	brcc	.+88     	; 0x1984 <DIO_U8ReadPinVal+0x5c>
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	79 f0       	breq	.+30     	; 0x194e <DIO_U8ReadPinVal+0x26>
    1930:	28 f0       	brcs	.+10     	; 0x193c <DIO_U8ReadPinVal+0x14>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	a9 f0       	breq	.+42     	; 0x1960 <DIO_U8ReadPinVal+0x38>
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	e1 f0       	breq	.+56     	; 0x1972 <DIO_U8ReadPinVal+0x4a>
    193a:	26 c0       	rjmp	.+76     	; 0x1988 <DIO_U8ReadPinVal+0x60>
    193c:	89 b3       	in	r24, 0x19	; 25
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_U8ReadPinVal+0x1e>
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	6a 95       	dec	r22
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_U8ReadPinVal+0x1a>
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	08 95       	ret
    194e:	86 b3       	in	r24, 0x16	; 22
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_U8ReadPinVal+0x30>
    1954:	95 95       	asr	r25
    1956:	87 95       	ror	r24
    1958:	6a 95       	dec	r22
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_U8ReadPinVal+0x2c>
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	08 95       	ret
    1960:	83 b3       	in	r24, 0x13	; 19
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_U8ReadPinVal+0x42>
    1966:	95 95       	asr	r25
    1968:	87 95       	ror	r24
    196a:	6a 95       	dec	r22
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_U8ReadPinVal+0x3e>
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	08 95       	ret
    1972:	80 b3       	in	r24, 0x10	; 16
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_U8ReadPinVal+0x54>
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	6a 95       	dec	r22
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_U8ReadPinVal+0x50>
    1980:	81 70       	andi	r24, 0x01	; 1
    1982:	08 95       	ret
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	08 95       	ret
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	08 95       	ret

0000198c <DIO_VoidSetPortDir>:
}


void DIO_VoidSetPortDir(u8 copy_u8port,u8 copy_u8dir)
{
			switch(copy_u8port)
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	41 f0       	breq	.+16     	; 0x19a0 <DIO_VoidSetPortDir+0x14>
    1990:	28 f0       	brcs	.+10     	; 0x199c <DIO_VoidSetPortDir+0x10>
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	39 f0       	breq	.+14     	; 0x19a4 <DIO_VoidSetPortDir+0x18>
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	39 f0       	breq	.+14     	; 0x19a8 <DIO_VoidSetPortDir+0x1c>
    199a:	08 95       	ret
			{
				case DIO_PORTA:DDRA_Reg=copy_u8dir;break;
    199c:	6a bb       	out	0x1a, r22	; 26
    199e:	08 95       	ret
				case DIO_PORTB:DDRB_Reg=copy_u8dir;break;
    19a0:	67 bb       	out	0x17, r22	; 23
    19a2:	08 95       	ret
				case DIO_PORTC:DDRC_Reg=copy_u8dir;break;
    19a4:	64 bb       	out	0x14, r22	; 20
    19a6:	08 95       	ret
				case DIO_PORTD:DDRD_Reg=copy_u8dir;break;
    19a8:	61 bb       	out	0x11, r22	; 17
    19aa:	08 95       	ret

000019ac <__vector_1>:
}


void __vector_1 (void) __attribute__((signal)); // cancel Linker optimization
void __vector_1 (void)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31

	EXTI_PTR[0]();
    19ce:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <EXTI_PTR>
    19d2:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <EXTI_PTR+0x1>
    19d6:	09 95       	icall
}
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31

	
	EXTI_PTR[1]();
    1a1c:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <EXTI_PTR+0x2>
    1a20:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <EXTI_PTR+0x3>
    1a24:	09 95       	icall
}
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31

	EXTI_PTR[2]();
    1a6a:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <EXTI_PTR+0x4>
    1a6e:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <EXTI_PTR+0x5>
    1a72:	09 95       	icall
	
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <GI_voidEnable>:
#include "GI_reg.h"
#include "GI_interface.h"

void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,GI_Pin);
    1a96:	8f b7       	in	r24, 0x3f	; 63
    1a98:	80 68       	ori	r24, 0x80	; 128
    1a9a:	8f bf       	out	0x3f, r24	; 63
    1a9c:	08 95       	ret

00001a9e <__vector_17>:
}

// ISR for EEPROM Ready interrupt
void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	8f 93       	push	r24
    eepromWriteComplete = 1;            // Set flag to indicate write completion
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <eepromWriteComplete>
}
    1ab0:	8f 91       	pop	r24
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <TIMER0_voidFastPWM>:
void TIMER0_voidSetCallBack(void(*ptr)(void),u8 copy_u8mode)
{
	switch(copy_u8mode)
	{
		case TIMER0_OVERFLOWMODE : TIMER_PTR[0]=ptr; break;
		case TIMER0_OUTCOMPMODE  : TIMER_PTR[1]=ptr; break;
    1abc:	93 b7       	in	r25, 0x33	; 51
    1abe:	98 7f       	andi	r25, 0xF8	; 248
    1ac0:	89 2b       	or	r24, r25
    1ac2:	83 bf       	out	0x33, r24	; 51
    1ac4:	83 b7       	in	r24, 0x33	; 51
    1ac6:	88 60       	ori	r24, 0x08	; 8
    1ac8:	83 bf       	out	0x33, r24	; 51
    1aca:	83 b7       	in	r24, 0x33	; 51
    1acc:	80 64       	ori	r24, 0x40	; 64
    1ace:	83 bf       	out	0x33, r24	; 51
    1ad0:	83 b7       	in	r24, 0x33	; 51
    1ad2:	80 62       	ori	r24, 0x20	; 32
    1ad4:	83 bf       	out	0x33, r24	; 51
    1ad6:	83 b7       	in	r24, 0x33	; 51
    1ad8:	8f 7e       	andi	r24, 0xEF	; 239
    1ada:	83 bf       	out	0x33, r24	; 51
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__floatsisf>
    1ae6:	23 e3       	ldi	r18, 0x33	; 51
    1ae8:	33 e3       	ldi	r19, 0x33	; 51
    1aea:	43 e2       	ldi	r20, 0x23	; 35
    1aec:	50 e4       	ldi	r21, 0x40	; 64
    1aee:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
    1af2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fixunssfsi>
    1af6:	6c bf       	out	0x3c, r22	; 60
    1af8:	08 95       	ret

00001afa <__vector_11>:
	}
}

void __vector_11(void) __attribute__ ((signal)) ;
void __vector_11(void)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
	if(TIMER_PTR[0] != null)
    1b1c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <TIMER_PTR>
    1b20:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <TIMER_PTR+0x1>
    1b24:	30 97       	sbiw	r30, 0x00	; 0
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <__vector_11+0x30>
	TIMER_PTR[0]();
    1b28:	09 95       	icall
}
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_10>:

void __vector_10(void) __attribute__ ((signal)) ;
void __vector_10(void)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	2f 93       	push	r18
    1b58:	3f 93       	push	r19
    1b5a:	4f 93       	push	r20
    1b5c:	5f 93       	push	r21
    1b5e:	6f 93       	push	r22
    1b60:	7f 93       	push	r23
    1b62:	8f 93       	push	r24
    1b64:	9f 93       	push	r25
    1b66:	af 93       	push	r26
    1b68:	bf 93       	push	r27
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
	if(TIMER_PTR[1] != null)
    1b6e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <TIMER_PTR+0x2>
    1b72:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <TIMER_PTR+0x3>
    1b76:	30 97       	sbiw	r30, 0x00	; 0
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <__vector_10+0x30>
	TIMER_PTR[1]();
    1b7a:	09 95       	icall
    1b7c:	ff 91       	pop	r31
    1b7e:	ef 91       	pop	r30
    1b80:	bf 91       	pop	r27
    1b82:	af 91       	pop	r26
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	7f 91       	pop	r23
    1b8a:	6f 91       	pop	r22
    1b8c:	5f 91       	pop	r21
    1b8e:	4f 91       	pop	r20
    1b90:	3f 91       	pop	r19
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <TIMER1_void10BitResFastPWM>:
#include "../../LIB/STD_TYPES.h"
#include "TIMER1_interface.h"
#include "TIMER1_reg.h"
void TIMER1_void10BitResFastPWM(u8 copy_u8pin,u8 copy_u8duty)
{
	u8 Loc_u8_mask=TCCR1B_REG;
    1b9e:	9e b5       	in	r25, 0x2e	; 46
	Loc_u8_mask &= 0xF8;
    1ba0:	98 7f       	andi	r25, 0xF8	; 248
	Loc_u8_mask |= TIMER1_PRESCALER;
    1ba2:	92 60       	ori	r25, 0x02	; 2
	TCCR1B_REG	=	Loc_u8_mask;
    1ba4:	9e bd       	out	0x2e, r25	; 46
	
	/*FastPWM 10Bit resolution*/
	SET_BIT(TCCR1A_REG,WGM10_PIN);
    1ba6:	9f b5       	in	r25, 0x2f	; 47
    1ba8:	91 60       	ori	r25, 0x01	; 1
    1baa:	9f bd       	out	0x2f, r25	; 47
	SET_BIT(TCCR1A_REG,WGM11_PIN);
    1bac:	9f b5       	in	r25, 0x2f	; 47
    1bae:	92 60       	ori	r25, 0x02	; 2
    1bb0:	9f bd       	out	0x2f, r25	; 47
	SET_BIT(TCCR1B_REG,WGM12_PIN);
    1bb2:	9e b5       	in	r25, 0x2e	; 46
    1bb4:	98 60       	ori	r25, 0x08	; 8
    1bb6:	9e bd       	out	0x2e, r25	; 46
	CLR_BIT(TCCR1B_REG,WGM13_PIN);
    1bb8:	9e b5       	in	r25, 0x2e	; 46
    1bba:	9f 7e       	andi	r25, 0xEF	; 239
    1bbc:	9e bd       	out	0x2e, r25	; 46
	switch(copy_u8pin)
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <TIMER1_void10BitResFastPWM+0x2a>
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	b9 f0       	breq	.+46     	; 0x1bf4 <TIMER1_void10BitResFastPWM+0x56>
    1bc6:	08 95       	ret
	{
		case OC1A_PIN :
				SET_BIT(TCCR1A_REG,COM1A1_PIN);
    1bc8:	8f b5       	in	r24, 0x2f	; 47
    1bca:	80 68       	ori	r24, 0x80	; 128
    1bcc:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(TCCR1A_REG,COM1A0_PIN);
    1bce:	8f b5       	in	r24, 0x2f	; 47
    1bd0:	8f 7b       	andi	r24, 0xBF	; 191
    1bd2:	8f bd       	out	0x2f, r24	; 47
				OCR1A_REG= (copy_u8duty*10.23);
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__floatsisf>
    1bde:	24 e1       	ldi	r18, 0x14	; 20
    1be0:	3e ea       	ldi	r19, 0xAE	; 174
    1be2:	43 e2       	ldi	r20, 0x23	; 35
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
    1bea:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fixunssfsi>
    1bee:	7b bd       	out	0x2b, r23	; 43
    1bf0:	6a bd       	out	0x2a, r22	; 42
		break;
    1bf2:	08 95       	ret
		case OC1B_PIN :
				SET_BIT(TCCR1A_REG,COM1B1_PIN);
    1bf4:	8f b5       	in	r24, 0x2f	; 47
    1bf6:	80 62       	ori	r24, 0x20	; 32
    1bf8:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT(TCCR1A_REG,COM1B0_PIN);
    1bfa:	8f b5       	in	r24, 0x2f	; 47
    1bfc:	8f 7e       	andi	r24, 0xEF	; 239
    1bfe:	8f bd       	out	0x2f, r24	; 47
				OCR1B_REG=(copy_u8duty*10.23);
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__floatsisf>
    1c0a:	24 e1       	ldi	r18, 0x14	; 20
    1c0c:	3e ea       	ldi	r19, 0xAE	; 174
    1c0e:	43 e2       	ldi	r20, 0x23	; 35
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__mulsf3>
    1c16:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fixunssfsi>
    1c1a:	79 bd       	out	0x29, r23	; 41
    1c1c:	68 bd       	out	0x28, r22	; 40
    1c1e:	08 95       	ret

00001c20 <TIMER1_voidFastPWM_ICR>:
	
}

void TIMER1_voidFastPWM_ICR()
{
	u8 Loc_u8_mask=TCCR1B_REG;
    1c20:	8e b5       	in	r24, 0x2e	; 46
	Loc_u8_mask &= 0xF8;
    1c22:	88 7f       	andi	r24, 0xF8	; 248
	Loc_u8_mask |= TIMER1_PRESCALER;
    1c24:	82 60       	ori	r24, 0x02	; 2
	TCCR1B_REG	=	Loc_u8_mask;
    1c26:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A_REG,WGM10_PIN);
    1c28:	8f b5       	in	r24, 0x2f	; 47
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A_REG,WGM11_PIN);
    1c2e:	8f b5       	in	r24, 0x2f	; 47
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B_REG,WGM12_PIN);
    1c34:	8e b5       	in	r24, 0x2e	; 46
    1c36:	88 60       	ori	r24, 0x08	; 8
    1c38:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG,WGM13_PIN);
    1c3a:	8e b5       	in	r24, 0x2e	; 46
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A_REG,COM1A1_PIN);
    1c40:	8f b5       	in	r24, 0x2f	; 47
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0_PIN);
    1c46:	8f b5       	in	r24, 0x2f	; 47
    1c48:	8f 7b       	andi	r24, 0xBF	; 191
    1c4a:	8f bd       	out	0x2f, r24	; 47
	
	ICR1_REG=40000;
    1c4c:	80 e4       	ldi	r24, 0x40	; 64
    1c4e:	9c e9       	ldi	r25, 0x9C	; 156
    1c50:	97 bd       	out	0x27, r25	; 39
    1c52:	86 bd       	out	0x26, r24	; 38
    1c54:	08 95       	ret

00001c56 <TIMER1_voidSetOCRVal>:
}
void TIMER1_voidSetOCRVal(u16 copy_u8dutycycle,u8 copy_u8TIM1pin)
{
	switch(copy_u8TIM1pin)
    1c56:	66 23       	and	r22, r22
    1c58:	19 f0       	breq	.+6      	; 0x1c60 <TIMER1_voidSetOCRVal+0xa>
    1c5a:	61 30       	cpi	r22, 0x01	; 1
    1c5c:	21 f0       	breq	.+8      	; 0x1c66 <TIMER1_voidSetOCRVal+0x10>
    1c5e:	08 95       	ret
	{
		case OCR1A_PIN :  OCR1A_REG = copy_u8dutycycle;  break;// Set duty cycle
    1c60:	9b bd       	out	0x2b, r25	; 43
    1c62:	8a bd       	out	0x2a, r24	; 42
    1c64:	08 95       	ret
		case OCR1B_PIN :  OCR1B_REG = copy_u8dutycycle;  break; // Set duty cycle
    1c66:	99 bd       	out	0x29, r25	; 41
    1c68:	88 bd       	out	0x28, r24	; 40
    1c6a:	08 95       	ret

00001c6c <__vector_5>:
	}
}

void __vector_5(void) __attribute__ ((signal)) ;
void __vector_5(void)
{
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	4f 93       	push	r20
    1c7c:	5f 93       	push	r21
    1c7e:	6f 93       	push	r22
    1c80:	7f 93       	push	r23
    1c82:	8f 93       	push	r24
    1c84:	9f 93       	push	r25
    1c86:	af 93       	push	r26
    1c88:	bf 93       	push	r27
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
	if(TIMER2_PTR != null)
	TIMER2_PTR[0]();
    1c8e:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <TIMER2_PTR>
    1c92:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <TIMER2_PTR+0x1>
    1c96:	09 95       	icall
}
    1c98:	ff 91       	pop	r31
    1c9a:	ef 91       	pop	r30
    1c9c:	bf 91       	pop	r27
    1c9e:	af 91       	pop	r26
    1ca0:	9f 91       	pop	r25
    1ca2:	8f 91       	pop	r24
    1ca4:	7f 91       	pop	r23
    1ca6:	6f 91       	pop	r22
    1ca8:	5f 91       	pop	r21
    1caa:	4f 91       	pop	r20
    1cac:	3f 91       	pop	r19
    1cae:	2f 91       	pop	r18
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_4>:

void __vector_4(void) __attribute__ ((signal)) ;
void __vector_4(void)
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
	if(TIMER2_PTR != null)
	TIMER2_PTR[1]();
    1cdc:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <TIMER2_PTR+0x2>
    1ce0:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <TIMER2_PTR+0x3>
    1ce4:	09 95       	icall
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	7f 91       	pop	r23
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <TWI_voidMasterInit>:
	
	
		/* enable ACK */
		SET_BIT(TWCR_REG,6) ;
		/* Enable TWI */
		SET_BIT(TWCR_REG,2) ;
    1d08:	98 e4       	ldi	r25, 0x48	; 72
    1d0a:	90 b9       	out	0x00, r25	; 0
    1d0c:	91 b1       	in	r25, 0x01	; 1
    1d0e:	9e 7f       	andi	r25, 0xFE	; 254
    1d10:	91 b9       	out	0x01, r25	; 1
    1d12:	91 b1       	in	r25, 0x01	; 1
    1d14:	9d 7f       	andi	r25, 0xFD	; 253
    1d16:	91 b9       	out	0x01, r25	; 1
    1d18:	88 23       	and	r24, r24
    1d1a:	11 f0       	breq	.+4      	; 0x1d20 <TWI_voidMasterInit+0x18>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	82 b9       	out	0x02, r24	; 2
    1d20:	86 b7       	in	r24, 0x36	; 54
    1d22:	80 64       	ori	r24, 0x40	; 64
    1d24:	86 bf       	out	0x36, r24	; 54
    1d26:	86 b7       	in	r24, 0x36	; 54
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	86 bf       	out	0x36, r24	; 54
    1d2c:	08 95       	ret

00001d2e <TWI_TWI_ErrSendStartCondition>:
	TWI_Err Loc_Err=NOErr ;
	
	//CLR_BIT(TWCR_REG, 5);     // <-- Clear any previous start condition LM 75
	
	// SendStartCondition
	SET_BIT(TWCR_REG,5) ;
    1d2e:	86 b7       	in	r24, 0x36	; 54
    1d30:	80 62       	ori	r24, 0x20	; 32
    1d32:	86 bf       	out	0x36, r24	; 54
	//CLR Flag to make the next operation
	SET_BIT(TWCR_REG,7) ;
    1d34:	86 b7       	in	r24, 0x36	; 54
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	86 bf       	out	0x36, r24	; 54
	
	while(GET_BIT(TWCR_REG,7)==0) ;
    1d3a:	06 b6       	in	r0, 0x36	; 54
    1d3c:	07 fe       	sbrs	r0, 7
    1d3e:	fd cf       	rjmp	.-6      	; 0x1d3a <TWI_TWI_ErrSendStartCondition+0xc>
	
	if ((TWSR_REG &0xF8) != START_ACK)
    1d40:	81 b1       	in	r24, 0x01	; 1
    1d42:	88 7f       	andi	r24, 0xF8	; 248
    1d44:	88 30       	cpi	r24, 0x08	; 8
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <TWI_TWI_ErrSendStartCondition+0x1e>
}


TWI_Err TWI_TWI_ErrSendStartCondition(void){

	TWI_Err Loc_Err=NOErr ;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	08 95       	ret
	
	while(GET_BIT(TWCR_REG,7)==0) ;
	
	if ((TWSR_REG &0xF8) != START_ACK)
	{
		Loc_Err=SendStartConditionErr ;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
		// do nothing
	}
	
	return Loc_Err ;

}
    1d4e:	08 95       	ret

00001d50 <TWI_TWI_ErrSendRepeatedStart>:
	
	
	 TWI_Err Loc_Err=NOErr ;
	
	 /* SendStartCondition */
	 SET_BIT(TWCR_REG,5) ;
    1d50:	86 b7       	in	r24, 0x36	; 54
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	86 bf       	out	0x36, r24	; 54
	 /*CLR Flag to make the next operation */
	 SET_BIT(TWCR_REG,7) ;
    1d56:	86 b7       	in	r24, 0x36	; 54
    1d58:	80 68       	ori	r24, 0x80	; 128
    1d5a:	86 bf       	out	0x36, r24	; 54
	 
	 while(GET_BIT(TWCR_REG,7)==0) ;
    1d5c:	06 b6       	in	r0, 0x36	; 54
    1d5e:	07 fe       	sbrs	r0, 7
    1d60:	fd cf       	rjmp	.-6      	; 0x1d5c <TWI_TWI_ErrSendRepeatedStart+0xc>
	 
	 if ((TWSR_REG &0xF8) != REP_START)
    1d62:	81 b1       	in	r24, 0x01	; 1
    1d64:	88 7f       	andi	r24, 0xF8	; 248
    1d66:	80 31       	cpi	r24, 0x10	; 16
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <TWI_TWI_ErrSendRepeatedStart+0x1e>
}

TWI_Err TWI_TWI_ErrSendRepeatedStart(void){
	
	
	 TWI_Err Loc_Err=NOErr ;
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	08 95       	ret
	 
	 while(GET_BIT(TWCR_REG,7)==0) ;
	 
	 if ((TWSR_REG &0xF8) != REP_START)
	 {
		 Loc_Err=SendRepeatedStartErr ;
    1d6e:	82 e0       	ldi	r24, 0x02	; 2

	 return Loc_Err ;
	
	
	
}
    1d70:	08 95       	ret

00001d72 <TWI_TWI_ErrMasterSendSlaveAddressWithWrite>:
	
	TWI_Err Loc_Err=NOErr ;
	
	/* load slave address on bus */
	
	TWDR_REG=copy_u8address<<1 ; 
    1d72:	88 0f       	add	r24, r24
    1d74:	83 b9       	out	0x03, r24	; 3
	
	/* CLR BIT 0 IN TWDR reg  to write operation */
	CLR_BIT(TWDR_REG,0) ; 
    1d76:	83 b1       	in	r24, 0x03	; 3
    1d78:	8e 7f       	andi	r24, 0xFE	; 254
    1d7a:	83 b9       	out	0x03, r24	; 3
	
	/*  CLR StartCondition BIT  */
	 CLR_BIT(TWCR_REG,5) ;
    1d7c:	86 b7       	in	r24, 0x36	; 54
    1d7e:	8f 7d       	andi	r24, 0xDF	; 223
    1d80:	86 bf       	out	0x36, r24	; 54
	/*CLR Flag to make the next operation */
	SET_BIT(TWCR_REG,7) ;
    1d82:	86 b7       	in	r24, 0x36	; 54
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	86 bf       	out	0x36, r24	; 54
	
	while(GET_BIT(TWCR_REG,7)==0) ;
    1d88:	06 b6       	in	r0, 0x36	; 54
    1d8a:	07 fe       	sbrs	r0, 7
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <TWI_TWI_ErrMasterSendSlaveAddressWithWrite+0x16>
	
	if ((TWSR_REG &0xF8) != SLAVE_ADD_AND_WR_ACK)
    1d8e:	81 b1       	in	r24, 0x01	; 1
    1d90:	88 7f       	andi	r24, 0xF8	; 248
    1d92:	88 31       	cpi	r24, 0x18	; 24
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <TWI_TWI_ErrMasterSendSlaveAddressWithWrite+0x28>
	
}

TWI_Err  TWI_TWI_ErrMasterSendSlaveAddressWithWrite(u8 copy_u8address) {
	
	TWI_Err Loc_Err=NOErr ;
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	08 95       	ret
	
	while(GET_BIT(TWCR_REG,7)==0) ;
	
	if ((TWSR_REG &0xF8) != SLAVE_ADD_AND_WR_ACK)
	{
		Loc_Err=MasterSendSlaveAddressWithWriteErr ;
    1d9a:	83 e0       	ldi	r24, 0x03	; 3

	return Loc_Err ;
	
	
	
}
    1d9c:	08 95       	ret

00001d9e <TWI_TWI_ErrMasterSendSlaveAddressWithRead>:
	
	TWI_Err Loc_Err=NOErr ;
	
	/* load slave address on bus */
	
	TWDR_REG=copy_u8address<<1 ;
    1d9e:	88 0f       	add	r24, r24
    1da0:	83 b9       	out	0x03, r24	; 3
	
	/* SET BIT 0 IN TWDR reg  to read operation */
	SET_BIT(TWDR_REG,0) ;
    1da2:	83 b1       	in	r24, 0x03	; 3
    1da4:	81 60       	ori	r24, 0x01	; 1
    1da6:	83 b9       	out	0x03, r24	; 3
	
	/*  CLR StartCondition BIT  */
	CLR_BIT(TWCR_REG,5) ;
    1da8:	86 b7       	in	r24, 0x36	; 54
    1daa:	8f 7d       	andi	r24, 0xDF	; 223
    1dac:	86 bf       	out	0x36, r24	; 54
	/*CLR Flag to make the next operation */
	SET_BIT(TWCR_REG,7) ;
    1dae:	86 b7       	in	r24, 0x36	; 54
    1db0:	80 68       	ori	r24, 0x80	; 128
    1db2:	86 bf       	out	0x36, r24	; 54
	
	while(GET_BIT(TWCR_REG,7)==0) ;
    1db4:	06 b6       	in	r0, 0x36	; 54
    1db6:	07 fe       	sbrs	r0, 7
    1db8:	fd cf       	rjmp	.-6      	; 0x1db4 <TWI_TWI_ErrMasterSendSlaveAddressWithRead+0x16>
	
	if ((TWSR_REG &0xF8) != SLAVE_ADD_AND_RR_ACK)
    1dba:	81 b1       	in	r24, 0x01	; 1
    1dbc:	88 7f       	andi	r24, 0xF8	; 248
    1dbe:	80 34       	cpi	r24, 0x40	; 64
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <TWI_TWI_ErrMasterSendSlaveAddressWithRead+0x28>
	
}
TWI_Err  TWI_TWI_ErrMasterSendSlaveAddressWithRead(u8 copy_u8address){
	
	
	TWI_Err Loc_Err=NOErr ;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	08 95       	ret
	
	while(GET_BIT(TWCR_REG,7)==0) ;
	
	if ((TWSR_REG &0xF8) != SLAVE_ADD_AND_RR_ACK)
	{
		Loc_Err=MasterSendSlaveAddressWithReadErr ;
    1dc6:	84 e0       	ldi	r24, 0x04	; 4
	else {
		// do nothing
	}

	return Loc_Err ;
}
    1dc8:	08 95       	ret

00001dca <TWI_TWI_ErrMasterSendData>:
	
	TWI_Err Loc_Err=NOErr ;
	
	/* load DATA  on bus */
	
	TWDR_REG=copy_u8data;
    1dca:	83 b9       	out	0x03, r24	; 3
	
	/*CLR Flag to make the next operation */
	SET_BIT(TWCR_REG,7) ;
    1dcc:	86 b7       	in	r24, 0x36	; 54
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	86 bf       	out	0x36, r24	; 54
	
	while(GET_BIT(TWCR_REG,7)==0) ;
    1dd2:	06 b6       	in	r0, 0x36	; 54
    1dd4:	07 fe       	sbrs	r0, 7
    1dd6:	fd cf       	rjmp	.-6      	; 0x1dd2 <TWI_TWI_ErrMasterSendData+0x8>
	
	if ((TWSR_REG &0xF8) != MASTER_WR_BYTE_ACK)
    1dd8:	81 b1       	in	r24, 0x01	; 1
    1dda:	88 7f       	andi	r24, 0xF8	; 248
    1ddc:	88 32       	cpi	r24, 0x28	; 40
    1dde:	11 f4       	brne	.+4      	; 0x1de4 <TWI_TWI_ErrMasterSendData+0x1a>
	return Loc_Err ;
}

TWI_Err  TWI_TWI_ErrMasterSendData(u8 copy_u8data) {
	
	TWI_Err Loc_Err=NOErr ;
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	08 95       	ret
	
	while(GET_BIT(TWCR_REG,7)==0) ;
	
	if ((TWSR_REG &0xF8) != MASTER_WR_BYTE_ACK)
	{
		Loc_Err=MasterSendDataErr ;
    1de4:	85 e0       	ldi	r24, 0x05	; 5

	return Loc_Err ;
	
	
	
}
    1de6:	08 95       	ret

00001de8 <TWI_TWI_ErrMasterReciveData>:


TWI_Err TWI_TWI_ErrMasterReciveData(u8 *copy_u8data){
    1de8:	fc 01       	movw	r30, r24
	
	TWI_Err Loc_Err=NOErr ;
	

	/*CLR Flag to make the next operation */
	SET_BIT(TWCR_REG,7) ;
    1dea:	96 b7       	in	r25, 0x36	; 54
    1dec:	90 68       	ori	r25, 0x80	; 128
    1dee:	96 bf       	out	0x36, r25	; 54
	
	while(GET_BIT(TWCR_REG,7)==0) ;
    1df0:	06 b6       	in	r0, 0x36	; 54
    1df2:	07 fe       	sbrs	r0, 7
    1df4:	fd cf       	rjmp	.-6      	; 0x1df0 <TWI_TWI_ErrMasterReciveData+0x8>
	
	if ((TWSR_REG &0xF8) != MASTER_RD_BYTE_WITH_ACK)
    1df6:	91 b1       	in	r25, 0x01	; 1
    1df8:	98 7f       	andi	r25, 0xF8	; 248
    1dfa:	90 35       	cpi	r25, 0x50	; 80
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <TWI_TWI_ErrMasterReciveData+0x1e>
		Loc_Err=MasterReciveDataErr ;
	}
	
	else {
	
	 *copy_u8data = TWDR_REG ; 
    1dfe:	83 b1       	in	r24, 0x03	; 3
    1e00:	80 83       	st	Z, r24
}


TWI_Err TWI_TWI_ErrMasterReciveData(u8 *copy_u8data){
	
	TWI_Err Loc_Err=NOErr ;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	08 95       	ret
	
	while(GET_BIT(TWCR_REG,7)==0) ;
	
	if ((TWSR_REG &0xF8) != MASTER_RD_BYTE_WITH_ACK)
	{
		Loc_Err=MasterReciveDataErr ;
    1e06:	86 e0       	ldi	r24, 0x06	; 6
	 *copy_u8data = TWDR_REG ; 
	}

	return Loc_Err ;
	
}
    1e08:	08 95       	ret

00001e0a <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void) {
	
		
		/*SendStopCondition*/
		SET_BIT(TWCR_REG,4) ;
    1e0a:	86 b7       	in	r24, 0x36	; 54
    1e0c:	80 61       	ori	r24, 0x10	; 16
    1e0e:	86 bf       	out	0x36, r24	; 54
		/*CLR Flag to make the next operation */
		SET_BIT(TWCR_REG,7) ;
    1e10:	86 b7       	in	r24, 0x36	; 54
    1e12:	80 68       	ori	r24, 0x80	; 128
    1e14:	86 bf       	out	0x36, r24	; 54
			while (GET_BIT(TWCR_REG, 4)); // ?? ADD THIS to wait until STOP clears
    1e16:	06 b6       	in	r0, 0x36	; 54
    1e18:	04 fc       	sbrc	r0, 4
    1e1a:	fd cf       	rjmp	.-6      	; 0x1e16 <TWI_voidSendStopCondition+0xc>
}
    1e1c:	08 95       	ret

00001e1e <UART_INIT_voidInit>:
static void (*UART_pfRxCallback)(u8) = null;
static void (*UART_pfTxCallback)(void) = null;

void UART_INIT_voidInit(u32 baudRate)
{
	u16 ubrr = (F_CPU / (16UL * baudRate)) - 1;
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	aa 1f       	adc	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	aa 1f       	adc	r26, r26
    1e30:	bb 1f       	adc	r27, r27
    1e32:	9c 01       	movw	r18, r24
    1e34:	ad 01       	movw	r20, r26
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	44 1f       	adc	r20, r20
    1e3c:	55 1f       	adc	r21, r21
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	44 1f       	adc	r20, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	74 e2       	ldi	r23, 0x24	; 36
    1e4a:	84 ef       	ldi	r24, 0xF4	; 244
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__udivmodsi4>
    1e52:	21 50       	subi	r18, 0x01	; 1
    1e54:	31 09       	sbc	r19, r1
	UBRRH_REG = (u8)(ubrr >> 8);
    1e56:	30 bd       	out	0x20, r19	; 32
	UBRRL_REG = (u8)ubrr;
    1e58:	29 b9       	out	0x09, r18	; 9

	SET_BIT(UCSRB_REG, RXEN_PIN);   // Receiver enable
    1e5a:	8a b1       	in	r24, 0x0a	; 10
    1e5c:	80 61       	ori	r24, 0x10	; 16
    1e5e:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB_REG, TXEN_PIN);   // Transmitter enable
    1e60:	8a b1       	in	r24, 0x0a	; 10
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB_REG, RXCIE_PIN);  // RX interrupt enable
    1e66:	8a b1       	in	r24, 0x0a	; 10
    1e68:	80 68       	ori	r24, 0x80	; 128
    1e6a:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB_REG, TXCIE_PIN);  // TX interrupt enable
    1e6c:	8a b1       	in	r24, 0x0a	; 10
    1e6e:	80 64       	ori	r24, 0x40	; 64
    1e70:	8a b9       	out	0x0a, r24	; 10

	UCSRC_REG = (1 << URSEL_PIN) | (1 << UCSZ1_PIN) | (1 << UCSZ0_PIN); // 8-bit data
    1e72:	86 e8       	ldi	r24, 0x86	; 134
    1e74:	80 bd       	out	0x20, r24	; 32
    1e76:	08 95       	ret

00001e78 <UART_voidSendAsync>:
}

void UART_voidSendAsync(u8 data)
{
	UDR_REG = data;
    1e78:	8c b9       	out	0x0c, r24	; 12
    1e7a:	08 95       	ret

00001e7c <UART_SetRxCallback>:
}

void UART_SetRxCallback(void (*copy_pfRx)(u8))
{
	UART_pfRxCallback = copy_pfRx;
    1e7c:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <UART_pfRxCallback+0x1>
    1e80:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <UART_pfRxCallback>
    1e84:	08 95       	ret

00001e86 <UART_SetTxCallback>:
}

void UART_SetTxCallback(void (*copy_pfTx)(void))
{
	UART_pfTxCallback = copy_pfTx;
    1e86:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <UART_pfTxCallback+0x1>
    1e8a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <UART_pfTxCallback>
    1e8e:	08 95       	ret

00001e90 <UART_voidSendString_INT>:
}
void UART_voidSendString_INT(const char* str)
{
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	ec 01       	movw	r28, r24
	while (*str)
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <UART_voidSendString_INT+0x1a>
	{
		UART_voidSendAsync(*str++);
    1e98:	21 96       	adiw	r28, 0x01	; 1
    1e9a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <UART_voidSendAsync>
    1e9e:	8f e1       	ldi	r24, 0x1F	; 31
    1ea0:	9e e4       	ldi	r25, 0x4E	; 78
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <UART_voidSendString_INT+0x12>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <UART_voidSendString_INT+0x18>
    1ea8:	00 00       	nop
{
	UART_pfTxCallback = copy_pfTx;
}
void UART_voidSendString_INT(const char* str)
{
	while (*str)
    1eaa:	88 81       	ld	r24, Y
    1eac:	81 11       	cpse	r24, r1
    1eae:	f4 cf       	rjmp	.-24     	; 0x1e98 <UART_voidSendString_INT+0x8>
	{
		UART_voidSendAsync(*str++);
		_delay_ms(5);
	}
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <__vector_13>:
// RX Complete Interrupt
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1eb6:	1f 92       	push	r1
    1eb8:	0f 92       	push	r0
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31
	if (UART_pfRxCallback != null)
    1ed8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <UART_pfRxCallback>
    1edc:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <UART_pfRxCallback+0x1>
    1ee0:	30 97       	sbiw	r30, 0x00	; 0
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <__vector_13+0x32>
	{
		UART_pfRxCallback(UDR_REG);
    1ee4:	8c b1       	in	r24, 0x0c	; 12
    1ee6:	09 95       	icall
	}
}
    1ee8:	ff 91       	pop	r31
    1eea:	ef 91       	pop	r30
    1eec:	bf 91       	pop	r27
    1eee:	af 91       	pop	r26
    1ef0:	9f 91       	pop	r25
    1ef2:	8f 91       	pop	r24
    1ef4:	7f 91       	pop	r23
    1ef6:	6f 91       	pop	r22
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <__vector_15>:

// TX Complete Interrupt
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1f0a:	1f 92       	push	r1
    1f0c:	0f 92       	push	r0
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	0f 92       	push	r0
    1f12:	11 24       	eor	r1, r1
    1f14:	2f 93       	push	r18
    1f16:	3f 93       	push	r19
    1f18:	4f 93       	push	r20
    1f1a:	5f 93       	push	r21
    1f1c:	6f 93       	push	r22
    1f1e:	7f 93       	push	r23
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	af 93       	push	r26
    1f26:	bf 93       	push	r27
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
	if (UART_pfTxCallback != null)
    1f2c:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <UART_pfTxCallback>
    1f30:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <UART_pfTxCallback+0x1>
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <__vector_15+0x30>
	{
		UART_pfTxCallback();
    1f38:	09 95       	icall
	}
}
    1f3a:	ff 91       	pop	r31
    1f3c:	ef 91       	pop	r30
    1f3e:	bf 91       	pop	r27
    1f40:	af 91       	pop	r26
    1f42:	9f 91       	pop	r25
    1f44:	8f 91       	pop	r24
    1f46:	7f 91       	pop	r23
    1f48:	6f 91       	pop	r22
    1f4a:	5f 91       	pop	r21
    1f4c:	4f 91       	pop	r20
    1f4e:	3f 91       	pop	r19
    1f50:	2f 91       	pop	r18
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <WDT_voidStart>:
#include "../../LIB/BIT_MATH.h"
#include "WDT_reg.h"
#include "WDT_interface.h"
void WDT_voidStart(u8 copy_u8time)
{
	SET_BIT(WDTCR_REG,WDE_PIN);
    1f5c:	91 b5       	in	r25, 0x21	; 33
    1f5e:	98 60       	ori	r25, 0x08	; 8
    1f60:	91 bd       	out	0x21, r25	; 33
	u8 Loc_u8_mask=WDTCR_REG;
    1f62:	91 b5       	in	r25, 0x21	; 33
	Loc_u8_mask &= 0xF8;
    1f64:	98 7f       	andi	r25, 0xF8	; 248
	Loc_u8_mask |= copy_u8time;
    1f66:	89 2b       	or	r24, r25
	WDTCR_REG	=	Loc_u8_mask;
    1f68:	81 bd       	out	0x21, r24	; 33
    1f6a:	08 95       	ret

00001f6c <__fixunssfsi>:
    1f6c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__fp_splitA>
    1f70:	88 f0       	brcs	.+34     	; 0x1f94 <__fixunssfsi+0x28>
    1f72:	9f 57       	subi	r25, 0x7F	; 127
    1f74:	98 f0       	brcs	.+38     	; 0x1f9c <__fixunssfsi+0x30>
    1f76:	b9 2f       	mov	r27, r25
    1f78:	99 27       	eor	r25, r25
    1f7a:	b7 51       	subi	r27, 0x17	; 23
    1f7c:	b0 f0       	brcs	.+44     	; 0x1faa <__fixunssfsi+0x3e>
    1f7e:	e1 f0       	breq	.+56     	; 0x1fb8 <__fixunssfsi+0x4c>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	88 1f       	adc	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	1a f0       	brmi	.+6      	; 0x1f90 <__fixunssfsi+0x24>
    1f8a:	ba 95       	dec	r27
    1f8c:	c9 f7       	brne	.-14     	; 0x1f80 <__fixunssfsi+0x14>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <__fixunssfsi+0x4c>
    1f90:	b1 30       	cpi	r27, 0x01	; 1
    1f92:	91 f0       	breq	.+36     	; 0x1fb8 <__fixunssfsi+0x4c>
    1f94:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fp_zero>
    1f98:	b1 e0       	ldi	r27, 0x01	; 1
    1f9a:	08 95       	ret
    1f9c:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_zero>
    1fa0:	67 2f       	mov	r22, r23
    1fa2:	78 2f       	mov	r23, r24
    1fa4:	88 27       	eor	r24, r24
    1fa6:	b8 5f       	subi	r27, 0xF8	; 248
    1fa8:	39 f0       	breq	.+14     	; 0x1fb8 <__fixunssfsi+0x4c>
    1faa:	b9 3f       	cpi	r27, 0xF9	; 249
    1fac:	cc f3       	brlt	.-14     	; 0x1fa0 <__fixunssfsi+0x34>
    1fae:	86 95       	lsr	r24
    1fb0:	77 95       	ror	r23
    1fb2:	67 95       	ror	r22
    1fb4:	b3 95       	inc	r27
    1fb6:	d9 f7       	brne	.-10     	; 0x1fae <__fixunssfsi+0x42>
    1fb8:	3e f4       	brtc	.+14     	; 0x1fc8 <__fixunssfsi+0x5c>
    1fba:	90 95       	com	r25
    1fbc:	80 95       	com	r24
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__floatunsisf>:
    1fca:	e8 94       	clt
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <__floatsisf+0x12>

00001fce <__floatsisf>:
    1fce:	97 fb       	bst	r25, 7
    1fd0:	3e f4       	brtc	.+14     	; 0x1fe0 <__floatsisf+0x12>
    1fd2:	90 95       	com	r25
    1fd4:	80 95       	com	r24
    1fd6:	70 95       	com	r23
    1fd8:	61 95       	neg	r22
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	99 23       	and	r25, r25
    1fe2:	a9 f0       	breq	.+42     	; 0x200e <__floatsisf+0x40>
    1fe4:	f9 2f       	mov	r31, r25
    1fe6:	96 e9       	ldi	r25, 0x96	; 150
    1fe8:	bb 27       	eor	r27, r27
    1fea:	93 95       	inc	r25
    1fec:	f6 95       	lsr	r31
    1fee:	87 95       	ror	r24
    1ff0:	77 95       	ror	r23
    1ff2:	67 95       	ror	r22
    1ff4:	b7 95       	ror	r27
    1ff6:	f1 11       	cpse	r31, r1
    1ff8:	f8 cf       	rjmp	.-16     	; 0x1fea <__floatsisf+0x1c>
    1ffa:	fa f4       	brpl	.+62     	; 0x203a <__floatsisf+0x6c>
    1ffc:	bb 0f       	add	r27, r27
    1ffe:	11 f4       	brne	.+4      	; 0x2004 <__floatsisf+0x36>
    2000:	60 ff       	sbrs	r22, 0
    2002:	1b c0       	rjmp	.+54     	; 0x203a <__floatsisf+0x6c>
    2004:	6f 5f       	subi	r22, 0xFF	; 255
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	8f 4f       	sbci	r24, 0xFF	; 255
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	16 c0       	rjmp	.+44     	; 0x203a <__floatsisf+0x6c>
    200e:	88 23       	and	r24, r24
    2010:	11 f0       	breq	.+4      	; 0x2016 <__floatsisf+0x48>
    2012:	96 e9       	ldi	r25, 0x96	; 150
    2014:	11 c0       	rjmp	.+34     	; 0x2038 <__floatsisf+0x6a>
    2016:	77 23       	and	r23, r23
    2018:	21 f0       	breq	.+8      	; 0x2022 <__floatsisf+0x54>
    201a:	9e e8       	ldi	r25, 0x8E	; 142
    201c:	87 2f       	mov	r24, r23
    201e:	76 2f       	mov	r23, r22
    2020:	05 c0       	rjmp	.+10     	; 0x202c <__floatsisf+0x5e>
    2022:	66 23       	and	r22, r22
    2024:	71 f0       	breq	.+28     	; 0x2042 <__floatsisf+0x74>
    2026:	96 e8       	ldi	r25, 0x86	; 134
    2028:	86 2f       	mov	r24, r22
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	2a f0       	brmi	.+10     	; 0x203a <__floatsisf+0x6c>
    2030:	9a 95       	dec	r25
    2032:	66 0f       	add	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	88 1f       	adc	r24, r24
    2038:	da f7       	brpl	.-10     	; 0x2030 <__floatsisf+0x62>
    203a:	88 0f       	add	r24, r24
    203c:	96 95       	lsr	r25
    203e:	87 95       	ror	r24
    2040:	97 f9       	bld	r25, 7
    2042:	08 95       	ret

00002044 <__fp_inf>:
    2044:	97 f9       	bld	r25, 7
    2046:	9f 67       	ori	r25, 0x7F	; 127
    2048:	80 e8       	ldi	r24, 0x80	; 128
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	08 95       	ret

00002050 <__fp_nan>:
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	80 ec       	ldi	r24, 0xC0	; 192
    2054:	08 95       	ret

00002056 <__fp_pscA>:
    2056:	00 24       	eor	r0, r0
    2058:	0a 94       	dec	r0
    205a:	16 16       	cp	r1, r22
    205c:	17 06       	cpc	r1, r23
    205e:	18 06       	cpc	r1, r24
    2060:	09 06       	cpc	r0, r25
    2062:	08 95       	ret

00002064 <__fp_pscB>:
    2064:	00 24       	eor	r0, r0
    2066:	0a 94       	dec	r0
    2068:	12 16       	cp	r1, r18
    206a:	13 06       	cpc	r1, r19
    206c:	14 06       	cpc	r1, r20
    206e:	05 06       	cpc	r0, r21
    2070:	08 95       	ret

00002072 <__fp_round>:
    2072:	09 2e       	mov	r0, r25
    2074:	03 94       	inc	r0
    2076:	00 0c       	add	r0, r0
    2078:	11 f4       	brne	.+4      	; 0x207e <__fp_round+0xc>
    207a:	88 23       	and	r24, r24
    207c:	52 f0       	brmi	.+20     	; 0x2092 <__fp_round+0x20>
    207e:	bb 0f       	add	r27, r27
    2080:	40 f4       	brcc	.+16     	; 0x2092 <__fp_round+0x20>
    2082:	bf 2b       	or	r27, r31
    2084:	11 f4       	brne	.+4      	; 0x208a <__fp_round+0x18>
    2086:	60 ff       	sbrs	r22, 0
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <__fp_round+0x20>
    208a:	6f 5f       	subi	r22, 0xFF	; 255
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	8f 4f       	sbci	r24, 0xFF	; 255
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	08 95       	ret

00002094 <__fp_split3>:
    2094:	57 fd       	sbrc	r21, 7
    2096:	90 58       	subi	r25, 0x80	; 128
    2098:	44 0f       	add	r20, r20
    209a:	55 1f       	adc	r21, r21
    209c:	59 f0       	breq	.+22     	; 0x20b4 <__fp_splitA+0x10>
    209e:	5f 3f       	cpi	r21, 0xFF	; 255
    20a0:	71 f0       	breq	.+28     	; 0x20be <__fp_splitA+0x1a>
    20a2:	47 95       	ror	r20

000020a4 <__fp_splitA>:
    20a4:	88 0f       	add	r24, r24
    20a6:	97 fb       	bst	r25, 7
    20a8:	99 1f       	adc	r25, r25
    20aa:	61 f0       	breq	.+24     	; 0x20c4 <__fp_splitA+0x20>
    20ac:	9f 3f       	cpi	r25, 0xFF	; 255
    20ae:	79 f0       	breq	.+30     	; 0x20ce <__fp_splitA+0x2a>
    20b0:	87 95       	ror	r24
    20b2:	08 95       	ret
    20b4:	12 16       	cp	r1, r18
    20b6:	13 06       	cpc	r1, r19
    20b8:	14 06       	cpc	r1, r20
    20ba:	55 1f       	adc	r21, r21
    20bc:	f2 cf       	rjmp	.-28     	; 0x20a2 <__fp_split3+0xe>
    20be:	46 95       	lsr	r20
    20c0:	f1 df       	rcall	.-30     	; 0x20a4 <__fp_splitA>
    20c2:	08 c0       	rjmp	.+16     	; 0x20d4 <__fp_splitA+0x30>
    20c4:	16 16       	cp	r1, r22
    20c6:	17 06       	cpc	r1, r23
    20c8:	18 06       	cpc	r1, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	f1 cf       	rjmp	.-30     	; 0x20b0 <__fp_splitA+0xc>
    20ce:	86 95       	lsr	r24
    20d0:	71 05       	cpc	r23, r1
    20d2:	61 05       	cpc	r22, r1
    20d4:	08 94       	sec
    20d6:	08 95       	ret

000020d8 <__fp_zero>:
    20d8:	e8 94       	clt

000020da <__fp_szero>:
    20da:	bb 27       	eor	r27, r27
    20dc:	66 27       	eor	r22, r22
    20de:	77 27       	eor	r23, r23
    20e0:	cb 01       	movw	r24, r22
    20e2:	97 f9       	bld	r25, 7
    20e4:	08 95       	ret

000020e6 <__mulsf3>:
    20e6:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsf3x>
    20ea:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__fp_round>
    20ee:	0e 94 2b 10 	call	0x2056	; 0x2056 <__fp_pscA>
    20f2:	38 f0       	brcs	.+14     	; 0x2102 <__mulsf3+0x1c>
    20f4:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_pscB>
    20f8:	20 f0       	brcs	.+8      	; 0x2102 <__mulsf3+0x1c>
    20fa:	95 23       	and	r25, r21
    20fc:	11 f0       	breq	.+4      	; 0x2102 <__mulsf3+0x1c>
    20fe:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__fp_inf>
    2102:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__fp_nan>
    2106:	11 24       	eor	r1, r1
    2108:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__fp_szero>

0000210c <__mulsf3x>:
    210c:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fp_split3>
    2110:	70 f3       	brcs	.-36     	; 0x20ee <__mulsf3+0x8>

00002112 <__mulsf3_pse>:
    2112:	95 9f       	mul	r25, r21
    2114:	c1 f3       	breq	.-16     	; 0x2106 <__mulsf3+0x20>
    2116:	95 0f       	add	r25, r21
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	55 1f       	adc	r21, r21
    211c:	62 9f       	mul	r22, r18
    211e:	f0 01       	movw	r30, r0
    2120:	72 9f       	mul	r23, r18
    2122:	bb 27       	eor	r27, r27
    2124:	f0 0d       	add	r31, r0
    2126:	b1 1d       	adc	r27, r1
    2128:	63 9f       	mul	r22, r19
    212a:	aa 27       	eor	r26, r26
    212c:	f0 0d       	add	r31, r0
    212e:	b1 1d       	adc	r27, r1
    2130:	aa 1f       	adc	r26, r26
    2132:	64 9f       	mul	r22, r20
    2134:	66 27       	eor	r22, r22
    2136:	b0 0d       	add	r27, r0
    2138:	a1 1d       	adc	r26, r1
    213a:	66 1f       	adc	r22, r22
    213c:	82 9f       	mul	r24, r18
    213e:	22 27       	eor	r18, r18
    2140:	b0 0d       	add	r27, r0
    2142:	a1 1d       	adc	r26, r1
    2144:	62 1f       	adc	r22, r18
    2146:	73 9f       	mul	r23, r19
    2148:	b0 0d       	add	r27, r0
    214a:	a1 1d       	adc	r26, r1
    214c:	62 1f       	adc	r22, r18
    214e:	83 9f       	mul	r24, r19
    2150:	a0 0d       	add	r26, r0
    2152:	61 1d       	adc	r22, r1
    2154:	22 1f       	adc	r18, r18
    2156:	74 9f       	mul	r23, r20
    2158:	33 27       	eor	r19, r19
    215a:	a0 0d       	add	r26, r0
    215c:	61 1d       	adc	r22, r1
    215e:	23 1f       	adc	r18, r19
    2160:	84 9f       	mul	r24, r20
    2162:	60 0d       	add	r22, r0
    2164:	21 1d       	adc	r18, r1
    2166:	82 2f       	mov	r24, r18
    2168:	76 2f       	mov	r23, r22
    216a:	6a 2f       	mov	r22, r26
    216c:	11 24       	eor	r1, r1
    216e:	9f 57       	subi	r25, 0x7F	; 127
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	9a f0       	brmi	.+38     	; 0x219a <__mulsf3_pse+0x88>
    2174:	f1 f0       	breq	.+60     	; 0x21b2 <__mulsf3_pse+0xa0>
    2176:	88 23       	and	r24, r24
    2178:	4a f0       	brmi	.+18     	; 0x218c <__mulsf3_pse+0x7a>
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	bb 1f       	adc	r27, r27
    2180:	66 1f       	adc	r22, r22
    2182:	77 1f       	adc	r23, r23
    2184:	88 1f       	adc	r24, r24
    2186:	91 50       	subi	r25, 0x01	; 1
    2188:	50 40       	sbci	r21, 0x00	; 0
    218a:	a9 f7       	brne	.-22     	; 0x2176 <__mulsf3_pse+0x64>
    218c:	9e 3f       	cpi	r25, 0xFE	; 254
    218e:	51 05       	cpc	r21, r1
    2190:	80 f0       	brcs	.+32     	; 0x21b2 <__mulsf3_pse+0xa0>
    2192:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__fp_inf>
    2196:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__fp_szero>
    219a:	5f 3f       	cpi	r21, 0xFF	; 255
    219c:	e4 f3       	brlt	.-8      	; 0x2196 <__mulsf3_pse+0x84>
    219e:	98 3e       	cpi	r25, 0xE8	; 232
    21a0:	d4 f3       	brlt	.-12     	; 0x2196 <__mulsf3_pse+0x84>
    21a2:	86 95       	lsr	r24
    21a4:	77 95       	ror	r23
    21a6:	67 95       	ror	r22
    21a8:	b7 95       	ror	r27
    21aa:	f7 95       	ror	r31
    21ac:	e7 95       	ror	r30
    21ae:	9f 5f       	subi	r25, 0xFF	; 255
    21b0:	c1 f7       	brne	.-16     	; 0x21a2 <__mulsf3_pse+0x90>
    21b2:	fe 2b       	or	r31, r30
    21b4:	88 0f       	add	r24, r24
    21b6:	91 1d       	adc	r25, r1
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	97 f9       	bld	r25, 7
    21be:	08 95       	ret

000021c0 <__udivmodsi4>:
    21c0:	a1 e2       	ldi	r26, 0x21	; 33
    21c2:	1a 2e       	mov	r1, r26
    21c4:	aa 1b       	sub	r26, r26
    21c6:	bb 1b       	sub	r27, r27
    21c8:	fd 01       	movw	r30, r26
    21ca:	0d c0       	rjmp	.+26     	; 0x21e6 <__udivmodsi4_ep>

000021cc <__udivmodsi4_loop>:
    21cc:	aa 1f       	adc	r26, r26
    21ce:	bb 1f       	adc	r27, r27
    21d0:	ee 1f       	adc	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	a2 17       	cp	r26, r18
    21d6:	b3 07       	cpc	r27, r19
    21d8:	e4 07       	cpc	r30, r20
    21da:	f5 07       	cpc	r31, r21
    21dc:	20 f0       	brcs	.+8      	; 0x21e6 <__udivmodsi4_ep>
    21de:	a2 1b       	sub	r26, r18
    21e0:	b3 0b       	sbc	r27, r19
    21e2:	e4 0b       	sbc	r30, r20
    21e4:	f5 0b       	sbc	r31, r21

000021e6 <__udivmodsi4_ep>:
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	1a 94       	dec	r1
    21f0:	69 f7       	brne	.-38     	; 0x21cc <__udivmodsi4_loop>
    21f2:	60 95       	com	r22
    21f4:	70 95       	com	r23
    21f6:	80 95       	com	r24
    21f8:	90 95       	com	r25
    21fa:	9b 01       	movw	r18, r22
    21fc:	ac 01       	movw	r20, r24
    21fe:	bd 01       	movw	r22, r26
    2200:	cf 01       	movw	r24, r30
    2202:	08 95       	ret

00002204 <__umulhisi3>:
    2204:	a2 9f       	mul	r26, r18
    2206:	b0 01       	movw	r22, r0
    2208:	b3 9f       	mul	r27, r19
    220a:	c0 01       	movw	r24, r0
    220c:	a3 9f       	mul	r26, r19
    220e:	70 0d       	add	r23, r0
    2210:	81 1d       	adc	r24, r1
    2212:	11 24       	eor	r1, r1
    2214:	91 1d       	adc	r25, r1
    2216:	b2 9f       	mul	r27, r18
    2218:	70 0d       	add	r23, r0
    221a:	81 1d       	adc	r24, r1
    221c:	11 24       	eor	r1, r1
    221e:	91 1d       	adc	r25, r1
    2220:	08 95       	ret

00002222 <_exit>:
    2222:	f8 94       	cli

00002224 <__stop_program>:
    2224:	ff cf       	rjmp	.-2      	; 0x2224 <__stop_program>
